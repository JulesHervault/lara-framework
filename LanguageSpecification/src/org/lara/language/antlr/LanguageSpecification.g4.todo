grammar LanguageSpecification;

file: file_content* EOF;

file_content: (root | global | joinpoint | typedef)? LINEBREAK;

root: 'root' IDENTIFIER ('as' IDENTIFIER)?;

global: 'global' '{' joinpoint_content* '}';
 
joinpoint: 'joinpoint' IDENTIFIER ('extends' IDENTIFIER)? '{' joinpoint_content* '}';

joinpoint_content: (attribute | selects_section | actions_section)? LINEBREAK;

attribute: declaration argument_list?;
selects_section: 'selects' '{' selects_content* '}';
selects_content: (IDENTIFIER ('as' IDENTIFIER)?)? LINEBREAK; 

actions_section: 'actions' '{' actions_content* '}'; 
actions_content: (declaration argument_list)? LINEBREAK;
argument_list: '(' (parameter ( ',' parameter)*)? ')';

 
declaration: type IDENTIFIER; 
 
parameter: declaration '=' literal;

literal: NUMBER | array_literal |  STRING | 'null' | 'undefined'; //| STRING | OBJECT_LITERAL | ARRAY_LITERAL |  
  
array_literal: '[' (literal (',' literal)* )? ']';
  
typedef: 'typedef' IDENTIFIER '{' typedef_content* '}';
typedef_content: (declaration)? LINEBREAK;


type: (enumType | primitive | IDENTIFIER) ('[]')*;

primitive: 'int' | 'float' | 'string' | 'joinpoint' | 'object' | 'template'  ;

enumType: '{' enumElement (',' enumElement)* '}';


enumElement: type | LetterOrDigit;

NUMBER: [0-9]+(.[0-9]+)?;

STRING: STRING_QUOTES | STRING_TICKS; 
STRING_QUOTES: '"' (~["\\\r\n]  |  ESCAPE_SEQUENCE)* '"';
STRING_TICKS: '\'' (~['\\\r\n]  |  ESCAPE_SEQUENCE)* '\'';

ESCAPE_SEQUENCE: ('\\'['"?abfnrtv\\]) | '\\\n'   |   '\\\r\n';

WHITESPACE: [ \t]+ -> skip;
LINEBREAK: [\r\n]+;

IDENTIFIER: [a-zA-Z_] (LetterOrDigit)?; 

LetterOrDigit: [a-zA-Z0-9_]+;

COMMENT:   '/*' .*? '*/' -> skip;

LINE_COMMENT:   '//' ~[\r\n]* -> skip;
