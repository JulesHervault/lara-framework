import lara.mutation.MutationGenerator;

import lara.actions.Actions;

import lara.Check;

/**
 * Iterative mutator, allows to perform one mutation at a time, and restore the code before each mutation.
 * 
 * @constructor
 * @param {lara.mutation.MutationGenerator...} generators
 *
 */
var IterativeMutator = function() {
	this.generators = arrayFromArgs(arguments);	
	
	if(this.generators.length === 0) {
		throw "IterativeMutator needs at least one generator";
	}

	// Check if elements are generators
	for(var generator of this.generators) {
		Check.instance(generator, MutationGenerator);
	}

	// True if the current code is mutated, false otherwise
	this.isMutated = false;

	// If true, before each call to .mutate() will check if the code is already mutated, 
	// and call restore before the mutation is applied
	this.automaticRestore = true;
	
	this.joinPoints = [];
	
	this.mutantIterator = undefined;
	this.currentOriginalPoint = undefined;
	this.currentMutatedPoint = undefined;
	
	this.hasFinished = false;	
};


/**
 * Introduces a single mutation to the code. 
 * If the code has been mutated already, restores the code before mutating again. 
 * If there are no mutations left, does nothing.
 *
 * @return true if a mutation occurred, false otherwise
 */
IterativeMutator.prototype.mutateSource = function() {
	// If no mutations left, do nothing
	if(this.hasFinished) {
		return false;
	}
	
	// If no iterator, create it
	if(this.mutantIterator === undefined) {
		this.mutantIterator = this._generator();
	}


	// Get next element
	var element = this.mutantIterator.next();

	if(!element.done) {
		return true;
	}
	
	this.hasFinished = true;
	return false;
}


/**
 *  If the code has been mutated, restores the code to its original state. If not, does nothing.
 */
IterativeMutator.prototype.restoreSource = function() {
	// If not mutated, return 
	if(!this.isMutated) {
		return;
	}


	if(this.currentOriginalPoint === undefined) {
		throw "Original point is undefined";
	}
	
	if(this.currentMutatedPoint === undefined) {
		throw "Mutated point is undefined";
	}	

	this.isMutated = false;
	this.currentMutatedPoint.insertReplace(this.currentOriginalPoint);
	
	// Unset mutated point
	this.currentMutatedPoint = undefined;

}


/**
 * @return {$jp} the point in the code where the mutation is occurring, or undefined if there are not more mutations left.
 */
IterativeMutator.prototype.getMutationPoint = function() {
	return this.currentOriginalPoint;
} 


/**
 * @return {$jp} the point with currently mutated code, or undefined if the code is not currently mutated.
 */
IterativeMutator.prototype.getMutatedPoint = function() {
	return this.currentMutatedPoint;
} 


/**
 * Create generator function that applies mutations.
 *
 * return {{originalJp, mutatedJp}} an object containing the original join point and the mutated join point
 */
IterativeMutator.prototype._generator = function*() {

	if(this.isMutated) {
		throw "Code is currently mutated, cannot create a generator";
	}


	// Iterate over all join points
	for(var $jp of this.joinPoints) {

		
		//this.currentOriginalPoint = $jp;
	
		// Iterate over all mutation generators
		// Each generator supports a single mutation
		for(var generator of this.generators) {

			// If current mutation does not mutate the point, skip
			if(!generator.isMutationPoint($jp)) {
				continue;
			}

			// Get id of current version
			var beforeMutationVersion = Actions.getCurrentId();
		
			var $mutatedJp = generator.mutate($jp);
			//println("Original: " + $jp.code);
			//println("Mutated: " + $mutatedJp.code);
			// Guarantee mutation happened
			Check.isDefined($mutatedJp);
		
			this.currentOriginalPoint = $jp;
			this.currentMutatedPoint = $mutatedJp;
		
			var mutationResult = {"mutatedJp": $mutatedJp, "originalJp": $jp};
			//printlnObject(mutationResult);
			yield mutationResult;
		
			// Restore version
			Actions.restore(beforeMutationVersion);	
		}
	
	}

	// Mark as finished
	this.hasFinished = true;
	
	// Unset current original point
	this.currentOriginalPoint = undefined;
}


/**
 * @param {joinpoint...} 
 */
IterativeMutator.prototype.addJps = function() {
	var jps = arrayFromArgs(arguments);	
	for(var $jp of jps) {
		this.joinPoints.push($jp);
	}
}

/**
 * @return {String} the name of this mutator
 */
IterativeMutator.prototype.getName = function() {
	return "IterativeMutator";
}
