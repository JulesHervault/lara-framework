import lara.Check;
import lara.actions.SourceAction;

/**
 * Manages actions that are applied to the source code.
 *
 * @class
 */
var Actions = {};

/**
 * Sequence of applied actions.
 */
Actions._actions = [];


/**
 * Applies the given action and puts it at the end of the sequence of transformations.
 *
 * @param {SourceAction} action - Action to be applied.
 */
Actions.add = function(action) {
	Check.isDefined(action);
	Check.isTrue(action instanceof SourceAction, "Parameter 'action' is not an instance of Action");
	
	action.transform();
	Actions._actions.push(action);
}

/**
 * @return the id of the current transformation sequence.
 */
Actions.getCurrentId = function() {
	return Actions._actions.length;
}

/**
 * @param {Object} id - represents a point in the transformation sequence
 */
Actions.restore = function(id) {
	Check.isNumber(id);

	if(id > Actions._actions.length) {
		println("Actions.restore: id '"+id+"' not found in actions history");
		return;
	}
	
	// Already at the required point
	if(id == Actions._actions.length) {
		debug("Actions.restore: already at history point '"+id+"'");
		return;
	}

	// Reverse actions until we get to the required point
	var numberOfActionsToRevert = Actions._actions.length - id;
	for(var i=0; i<numberOfActionsToRevert; i++) {
		var action = Actions._actions.pop();
		action.reverse();
	}
}

/**
 * Rolls back a certain amount of actions.
 *
 * @param {Number} amount - number of actions to rollback.
 */
Actions.back = function(amount) {
	Check.isNumber(amount);

	if(amount > Actions._actions.length) {
		println("Actions.back: rolling back the current " + Actions._actions.length + " actions instead of " + amount);
		amount = Actions._actions.length;
	}

	for(var i=0; i<amount; i++) {
		var action = Actions._actions.pop();
		action.reverse();
	}	
}