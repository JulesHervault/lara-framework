import lara.Check;
import lara.transform.Transform;

/**
 * Sequence of code transformations that have been applied.
 *
 * @class
 */
var TransformHistory = {};

/**
 * Sequence of applied transformations.
 */
TransformHistory._transforms = [];


/**
 * Applies the given transform and puts it at the end of the sequence of transformations.
 *
 * @param {Transform} transform - Action to be applied.
 */
TransformHistory.add = function(transform) {
	Check.isDefined(transform);
	Check.isTrue(transform instanceof Transform, "Parameter 'action' is not an instance of Action");
	
	transform.transform();
	TransformHistory._transforms.push(transform);
}

/**
 * @return the id of the current transformation sequence.
 */
TransformHistory.getCurrentId = function() {
	return TransformHistory._transforms.length;
}

/**
 * @param {Object} id - represents a point in the transformation sequence
 */
TransformHistory.restore = function(id) {
	Check.isNumber(id);

	if(id > TransformHistory._transforms.length) {
		println("TransformHistory.restore: id '"+id+"' not found in actions history");
		return;
	}
	
	// Already at the required point
	if(id == TransformHistory._transforms.length) {
		println("TransformHistory.restore: already at history point '"+id+"'");
		return;
	}

	// Reverse actions until we get to the required point
	var numberOfActionsToRevert = TransformHistory._transforms.length - id;
	for(var i=0; i<numberOfActionsToRevert; i++) {
		var action = TransformHistory._transforms.pop();
		action.reverse();
	}
}

/**
 * Rolls back a certain amount of actions.
 *
 * @param {Number} amount - number of actions to rollback.
 */
TransformHistory.back = function(amount) {
	Check.isNumber(amount);

	if(amount > TransformHistory._transforms.length) {
		println("TransformHistory.back: rolling back the current " + TransformHistory._transforms.length + " actions instead of " + amount);
		amount = TransformHistory._transforms.length;
	}

	for(var i=0; i<amount; i++) {
		var action = TransformHistory._transforms.pop();
		action.reverse();
	}	
}