import lara.Check;
import lara.source.Transform;

/**
 * Represents a source code transformation of arbitrary complexity.
 *
 * @param {String|Object} name - The name of this source action. If an object is passed, invokes .toString() over the object.
 */
var SourceAction = function(name) {
	Check.isDefined(name);

	this.name = name.toString();
};


SourceAction.prototype.getName() = function() {
	return this.name;
}



/*** TO IMPLEMENT ***/


/**
 * Tests if this SourceAction can be applied to the given source point.
 *
 * @return {Boolean} true if this SourceAction can be applied to the given source point, false otherwise.
 */
SourceAction.prototype.isValid() = function($jp) {
	notImplemented("SourceAction.isValid");
}


/**
 * Generates the sequence of transformations corresponding to this action for the given source point.
 *
 * @return {Transform[]} the sequence of transformations corresponding to this action for the given source point.
 */
SourceAction.prototype.getTransforms() = function($jp) {
	notImplemented("SourceAction.getTransforms");
}
