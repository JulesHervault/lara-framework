/**
 * Base class for all LARA join points.
 *
 * @class
 */
 
function JoinPoint(astNode) {
	this.astNode = astNode;
}

JoinPoint.prototype.instanceOf = function(joinPointType) {
	return joinPointType === this.joinPointType;
}

JoinPoint.prototype.sameTypeAs = function(joinPoint) {
    if(typeof joinPoint !== typeof this)
        return false;
        
	if(joinPoint.joinPointType !== this.joinPointType)
        return false;
	
	return true;    
}

_lara_dummy_ = Object.defineProperty(JoinPoint.prototype, 'joinPointType', {
	configurable: true,
	get: function () { return 'joinpoint'; }
});

_lara_dummy_ = Object.defineProperty(JoinPoint.prototype, 'parent', {
	configurable: true,
	get: function () { 
		return (new JoinPoints()).getParent(this);
	}
});

_lara_dummy_ = Object.defineProperty(JoinPoint.prototype, 'children', {
	configurable: true,
	get: function () {
		return (new JoinPoints()).getChildren(this); 
	}
});

_lara_dummy_ = Object.defineProperty(JoinPoint.prototype, 'descendants', {
	configurable: true,
	get: function () { 
		return (new JoinPoints()).getDescendants(this); 
	}
});

_lara_dummy_ = Object.defineProperty(JoinPoint.prototype, 'code', {
	configurable: true,
	get: function () { throw this.constructor.name + '.code not implemented'; }
});

_lara_dummy_ = Object.defineProperty(JoinPoint.prototype, 'line', {
	configurable: true,
	get: function () { throw this.constructor.name + '.line not implemented'; }
});

JoinPoint.prototype.equals = function(joinPoint) {
	throw this.constructor.name + '.equals not implemented';
}
