import weaver.jp.DeclJp;

/**
 * 
 *
 * @class
 */
function ClassJp(astNode) {
    // Parent constructor
    DeclJp.call(this,astNode);
    
}
// Inheritance
ClassJp.prototype = Object.create(DeclJp.prototype);
ClassJp.prototype.constructor = ClassJp;

ClassJp.prototype.instanceOf = function(joinPointType) {
	if(joinPointType === this.joinPointType) {
		return true;
	}
	
	return (new DeclJp(this.astNode)).instanceOf(joinPointType);
}

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'joinPointType', {
	configurable: true,
	get: function () { return 'class'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'id', {
	configurable: true,
	get: function () { throw this.constructor.name + '.id not implemented'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'name', {
	configurable: true,
	get: function () { throw this.constructor.name + '.name not implemented'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'superClasses', {
	configurable: true,
	get: function () { throw this.constructor.name + '.superClasses not implemented'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'allSuperClasses', {
	configurable: true,
	get: function () { throw this.constructor.name + '.allSuperClasses not implemented'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'allMethods', {
	configurable: true,
	get: function () { throw this.constructor.name + '.allMethods not implemented'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'methods', {
	configurable: true,
	get: function () { throw this.constructor.name + '.methods not implemented'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'constructors', {
	configurable: true,
	get: function () { throw this.constructor.name + '.constructors not implemented'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'kind', {
	configurable: true,
	get: function () { throw this.constructor.name + '.kind not implemented'; }
});

