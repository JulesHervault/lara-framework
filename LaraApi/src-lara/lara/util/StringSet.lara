/**
 * Based on this code: https://stackoverflow.com/questions/4343746/is-there-a-data-structure-like-the-java-set-in-javascript
 * 
 * Changed the name of functions 'contains' to the name used in ECMAScript 6 ('has').
 * 'remove' has not been changed to 'delete' because in LARA 'delete' is a keyword and cannot be used as a function name
 * Also, tweaked the functionality of 'add' and 'delete' to behave similarly to ECMAScript 6 Set.
 *
 * @param {Object...} [args=[]] - Objects that will be transformed to Strings and used as the initial values of the set.
 */
var StringSet = function() {
	this.setObj = {};
	this.val = {};
		
	var argsArray = arrayFromArgs(arguments);
	for(var arg of argsArray) {
		this.add(arg.toString());
	}
	
};

StringSet.prototype.copy = function() {
	var newStringSet = new StringSet();
	
	for(var value of this.values()) {
		newStringSet.add(value);
	}

	return newStringSet;
}

StringSet.prototype.add = function(str) {
	this.setObj[str] = this.val;
	return str;
}

StringSet.prototype.has = function(str) {
	return this.setObj[str] === this.val;
}

StringSet.prototype.remove = function(str) {
	var hasValue = this.has(str);
	delete this.setObj[str];
	return hasValue;
}

StringSet.prototype.values = function() {
	var values = [];
	for (var i in this.setObj) {
		if (this.setObj[i] === this.val) {
			values.push(i);
		}
	}
	return values;
}

StringSet.prototype.isEmpty = function() {
	// If has any property, returns true
	for (var i in this.setObj) {
		return false;
	}

	return true;
	
//	println("IS EMPTY SUPPOSED:" + (this.values().length === 0));
//	println("IS EMPTY HW:" + this.setObj.length);	
/*
	var values = this.values();
	return values.length === 0;
	*/
}

/**
 * 
 * @returns A comma seperated list of the values in this set, delimited by
 * brackets to denote a set like data-structure
 */
StringSet.prototype.toString = function() {
	return '{' + this.values().join(', ') + '}';
}

/**
 * 
 * @param {StringSet} setA 
 * @param {StringSet} setB 
 * @returns {StringSet} A new set with the union of sets A and B
 */
StringSet.union = function(setA, setB) {
	var setNew = new StringSet(setA.values());

	for (var el in setB.setObj) {
		setNew.add(el);
	}

    return setNew;
}

/**
 * 
 * @param {StringSet} setA 
 * @param {StringSet} setB 
 * @returns {StringSet} A new set with the insersection of sets A and B
 */
StringSet.intersection = function(setA, setB) {
	var setNew = new StringSet();

	for (var el in setA.setObj) {
		if (setB.has(el))
			setNew.add(el);
	}

    return setNew;
}

/**
 * 
 * @param {StringSet} setA 
 * @param {StringSet} setB 
 * @returns {StringSet} A new set with the difference of sets A and B, i.e.
 * `A - B`. Note that is different from `B - A`.
 */
StringSet.difference = function(setA, setB) {
	var setNew = new StringSet(setA.values());

	for (var el in setB.setObj) {
		setNew.remove(el);
	}

    return setNew;
}
