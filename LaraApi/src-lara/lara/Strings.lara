import lara._JavaTypes;

/**
 * @class
 */
var Strings = {};

/**
 * Taken from here: https://stackoverflow.com/questions/154059/how-do-you-check-for-an-empty-string-in-javascript
 *
 * @return true if the given string is blank or contains only white-space
 */
Strings.isEmpty = function(string) {
	//var realString = string.toString();
	//return (realString.length === 0 || !realString.trim());
	return (string.length === 0 || !string.trim());
}

Strings.replacer = function(string, oldSequence, newSequence) {
	//_JavaTypes.getType(_JavaTypes.LaraApiTools);
	//return LaraApiTools.replacer(string, oldSequence, newSequence);
	return _JavaTypes.getLaraApiTools().replacer(string, oldSequence, newSequence);
}

/**
 * Escapes HTML code.
 *
 * @return String with escaped code
 */
Strings.escapeHtml = function(html) {
	return ApacheStrings.escapeHtml(html);
}

/**
 * Escapes JSON content.
 *
 * @return {string} String with escaped code
 */
Strings.escapeJson = function(jsonContents) {
	return SpecsStrings.escapeJson(jsonContents);
}

/**
 * Iterates over the given string, line-by-line, looking for the given prefix. If found, returns the contents of the line after the prefix.
 *
 * @returns {string} 
 */
Strings.extractValue = function(prefix, contents, errorOnUndefined) {
	checkType(prefix, "string", "Strings.extractValue::prefix");
	checkType(contents, "string", "Strings.extractValue::contents");
	
	if(errorOnUndefined === undefined) {
		errorOnUndefined = false;
	}
	
	var lines = StringLines.newInstance(contents);
	while(lines.hasNextLine()) {
		var line = lines.nextLine().trim();
		
		if(!line.startsWith(prefix)) {
			continue;
		}
		
		return line.substring(prefix.length);
	}

	if(errorOnUndefined) {
		throw "Could not extract a value with prefix '" + prefix + "' from output '" + contents + "'";
	}
	
	return undefined;	
}

Strings.asLines = function(string) {
	return StringLines.getLines(string);
}


/**
 * @param {*} value - The value to convert to Json.
 * 
 * @return {string} A string representing the given value in the Json format.
 */
Strings.toJson = function(value) {
	return JSON.stringify(value);
}

/**
 * Returns a random unique identifier.
 */
Strings.uuid = function() {
	return _JavaTypes.getUuid().randomUUID().toString();
}
