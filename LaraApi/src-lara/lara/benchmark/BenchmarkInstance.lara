/**
 * Represents a set of BenchmarkInstances.
 *
 * @param{String} setName - The name of this benchmark set.
 */
var BenchmarkInstance = function(name) {
	this._name = name;
	this._hasLoaded = false;
	this._hasCompiled = false;
};


/**
 * @returns {String} the name of this BenchmarkInstance.
 */ 
BenchmarkInstance.prototype.getName = function() {
	return this._name;
}


/**
 * Saves the current AST and loads this benchmark into the AST.
 */
BenchmarkInstance.prototype.load = function() {
	// Check if already loaded
	if(this._hasLoaded) {
		println("BenchmarkInstance.load(): Benchmark " + this.getName() + " is already loaded");
		return;
	}

	var result = this._loadPrivate();
	
	// Mark as loaded
	this._hasLoaded = true;
	
	return result;
}


/**
 * Restores the AST previous to load().
 */
BenchmarkInstance.prototype.close = function() {
	if(!this._hasLoaded) {
		println("BenchmarkInstance.close(): Benchmark " + this.getName() + " has not been loaded yet");
		return;
	}
	
	var result = this._closePrivate();
	
	this._hasLoaded = false;
	this._hasCompiled = false;
	
	return result;
}

/**
 * Compiles the current version of the benchmark that is in the AST. Requires calling .load() first.
 */
BenchmarkInstance.prototype.compile = function() {
	// Check if already loaded
	if(!this._hasLoaded) {
		println("BenchmarkInstance.compile(): Benchmark " + this.getName() + " has not been loaded yet");
		return;
	}

	var result = this._compilePrivate();
	
	// Mark as loaded
	this._hasCompiled = true;

	return result;
}

/**
 * Executes the current version of the benchmark. Requires calling .compile() first.
 */
BenchmarkInstance.prototype.execute = function() {

	// Check if already compiled
	if(!this._hasCompiled) {
		println("BenchmarkInstance.execute(): Benchmark " + this.getName() + " has not been compiled yet, compiling...");
		this.compile();
	}

	var result = this._executePrivate();
	
	return result;
}



/*** FUNCTIONS TO IMPLEMENT ***/

/**
 * 
 */
BenchmarkInstance.prototype._loadPrivate = function() {
	throw "BenchmarkInstance._loadPrivate not implemented for " + this.getName();
}

/**
 * 
 */
BenchmarkInstance.prototype._closePrivate = function() {
	throw "BenchmarkInstance._closePrivate not implemented for " + this.getName();
}

/**
 * 
 */
BenchmarkInstance.prototype._compilePrivate = function() {
	throw "BenchmarkInstance._compilePrivate not implemented for " + this.getName();
}

/**
 * 
 */
BenchmarkInstance.prototype._executePrivate = function() {
	throw "BenchmarkInstance._executePrivate not implemented for " + this.getName();
}



   