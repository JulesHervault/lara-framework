import lara.System;

/**
 * Launches processes.
 */
var ProcessExecutor = function() {
	// Configuration
	this.workingDir = "./";
	this.printToConsole = true;
	this.outputFile = undefined;
	this.append = false;
	this.timeUnit = new TimeUnits("SECONDS");
	this.timeout = undefined;
	this.outputPrefix = undefined;
	
	// Private state
	this.lastOutput = undefined;
	this.lastCommand = undefined;
	this._customReturnValue = undefined;
};

ProcessExecutor.prototype.setWorkingDir = function(workingDir) {
	this.workingDir = workingDir;
	return this;
}

ProcessExecutor.prototype.getWorkingDir = function() {
	return this.workingDir;
}

ProcessExecutor.prototype.setPrintToConsole = function(printToConsole) {
	checkType(printToConsole, "boolean", "ProcessExecutor.prototype.setPrintToConsole");
	this.printToConsole = printToConsole;
	return this;
}

ProcessExecutor.prototype.setOutputFile = function(outputFile) {
	this.outputFile = outputFile;
	return this;
}

ProcessExecutor.prototype.setAppend = function(append) {
	checkType(append, "boolean", "ProcessExecutor.prototype.append");
	this.append = append;
	return this;
}

ProcessExecutor.prototype.setTimeUnit = function(timeUnit) {
	this.timeUnit = new TimeUnits(timeUnit);
	return this;
}

ProcessExecutor.prototype.setTimeout = function(timeout) {
	this.timeout = timeout;
	return this;
}

/**
 * @param {(number|string)} returnValue an integer that represents the return value of the process executor
 */
ProcessExecutor.prototype.setCustomReturnValue = function(returnValue) {
	if(typeof returnValue === "string") {
		// Convert string to integer
		returnValue = parseInt(returnValue, 10);
	}

	checkType(returnValue, "number", "ProcessExecutor.setCustomReturnValue");

	this._customReturnValue = returnValue;
	return this;
}

ProcessExecutor.prototype.setOutputPrefix = function(outputPrefix) {
	this.outputPrefix = outputPrefix;
	return this;
}


ProcessExecutor.prototype.execute = function(command) {
	this.lastCommand = command;
	
	var timeoutNanos = null;
	if(this.timeout !== undefined) {
		timeoutNanos = this.timeUnit.toNanos(this.timeout);
	}
	
	// TODO: Can change LaraApiTools.runCommand to accept a file and append flag, to be able to write to a file in stream mode
	this.lastOutput = Java.type("pt.up.fe.specs.lara.LaraApiTools").runCommand(command, this.workingDir, this.printToConsole, timeoutNanos);
	
	var executeOutput = this.lastOutput.getOutput();
	if(executeOutput !== undefined) {
		checkType(executeOutput, "string");
	}

	// After previous TODO is done, this can be removed
	if(this.outputFile !== undefined) {
		var outputContents = executeOutput;
		if(this.outputPrefix !== undefined && executeOutput.length() > 0) {
			outputContents = this.outputPrefix + outputContents;
		}
		
		if(this.append) {
			Io.appendFile(this.outputFile, outputContents); 
		} else {
			Io.writeFile(this.outputFile, outputContents);
		}
	}
	
	return executeOutput;
}

ProcessExecutor.prototype.getCommand = function() {
	if(this.lastCommand === undefined) {
		println("ProcessExecutor.getLastCommand: no execution has been done yet");
		return undefined;
	}
	
	return this.lastCommand;
}

ProcessExecutor.prototype.getConsoleOutput = function() {
	if(this.lastOutput === undefined) {
		println("ProcessExecutor.getConsoleOutput: no execution has been done yet");
		return undefined;
	}
	
	return this.lastOutput.getOutput();
}

ProcessExecutor.prototype.getReturnValue = function() {	
	// Give priority to custom value
	if(this._customReturnValue !== undefined) {
		return this._customReturnValue;
	}
	
	if(this.lastOutput === undefined) {
		println("ProcessExecutor.getReturnValue: no execution has been done yet");
		return undefined;
	}
	
	return this.lastOutput.getReturnValue();
}

ProcessExecutor.prototype.getStdOut = function() {
	if(this.lastOutput === undefined) {
		println("ProcessExecutor.getStdOut: no execution has been done yet");
		return undefined;
	}
	
	return this.lastOutput.getStdOut();
}

ProcessExecutor.prototype.getStdErr = function() {
	if(this.lastOutput === undefined) {
		println("ProcessExecutor.getStdErr: no execution has been done yet");
		return undefined;
	}
	
	return this.lastOutput.getStdErr();
}

// TODO: Implement for printToConsole, outputFile, append, timeUnit



//System.execute = function(command, workingDir, printToConsole, outputFile, append, timeout, timeunit) {
