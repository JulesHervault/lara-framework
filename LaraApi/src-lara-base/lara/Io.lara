/**
 * Utility methods related with input/output operations on files.
 * @class
 */
var Io = {};


/**
 * Creates a folder.
 */
Io.mkdir = function(fileOrBaseFolder, optionalFile) {
	return SpecsIo.mkdir(Io.getPath(fileOrBaseFolder, optionalFile));
}

/**
 * Global version of the function.
 */
function mkdir(fileOrBaseFolder, optionalFile) {
	return Io.mkdir(fileOrBaseFolder, optionalFile);
	//return SpecsIo.mkdir(path);
}


Io.getPath = function(fileOrBaseFolder, optionalFile) {
	if(optionalFile === undefined) {
		return new java.io.File(fileOrBaseFolder); 
	}
	
	return new java.io.File(fileOrBaseFolder, optionalFile);
}	

Io.getAbsolutePath = function(fileOrBaseFolder, optionalFile) {
	return SpecsIo.getCanonicalPath(Io.getPath(fileOrBaseFolder, optionalFile));
}

/**
 * Gets the paths corresponding to the given base folder and argument patterns.
 */
Io.getPaths = function(baseFolder) {
	checkDefined(baseFolder, "baseFolder", "Io.getPaths");
	
	var baseFolderFile = Io.getPath(baseFolder);
	
	// For each argument after the baseFolder, treat it as a different file/glob
	var files = [];
	for(argument of arguments) {
		var foundFiles = SpecsIo.getFilesWithPattern(baseFolderFile, argument);
		
		for(file of foundFiles) {
			files.push(file);
		}
	}
	
	return files;
}

/**
 * Returns a List with a string for each line of the given file
 */
Io.readLines = function(fileOrBaseFolder, optionalFile) {
	return LaraIo.readLines(Io.getPath(fileOrBaseFolder, optionalFile));	
}


/**
 * Global version of the function.
 */
function readLines(fileOrBaseFolder, optionalFile) {
	return Io.readLines(fileOrBaseFolder, optionalFile);
}



/**
 * Deletes the given file.
 */
Io.deleteFile = function(fileOrBaseFolder, optionalFile) {
	var file = Io.getPath(fileOrBaseFolder, optionalFile);
	if(!Io.isFile(file)) {
		// Skipping file
		return;
	}

	return LaraIo.deleteFile(file);
}

/**
 * Global version of the function.
 */
function deleteFile(fileOrBaseFolder, optionalFile) {
	return Io.deleteFile(fileOrBaseFolder, optionalFile);
}



/**
 * Each argument is a file that will be deleted.
 */
Io.deleteFiles = function() {
	for(argument of arguments) {
		deleteFile(argument);
	}
}

/**
 * Deletes a folder and its contents.
 *
 * @return true if both the contents and the folder could be deleted
 */
Io.deleteFolder = function(folderPath) {
	var folder = Io.getPath(folderPath);
	return SpecsIo.deleteFolder(folder);
}

/**
 * @return true if and only if the file denoted by this abstract pathname exists and is a normal file; false otherwise
 */
Io.isFile = function(path) {
	if(typeof path === "string") {
		path = Io.getPath(path);
	}
	
	return path.isFile();
}

/**
 * @return true if and only if the file denoted by this abstract pathname exists and is a folder; false otherwise
 */
Io.isFolder = function(path) {
	if(typeof path === "string") {
		path = Io.getPath(path);
	}
	
	return path.isDirectory();
}

Io.readJson = function(path) {
	return fileToJSON(path);
}

Io.writeJson = function(path, object) {
	JSONtoFile(path, object);
}

Io.copyFile = function(filepath, destination) {
	checkDefined(filepath, "filepath", "Io.copyFile");
	checkTrue(Io.isFile(filepath), "Io.copyFile: given filepath '"+filepath+"' is not a file");
	
	return SpecsIo.copy(Io.getPath(filepath), Io.getPath(destination));
}

Io.copyFolder = function(filepath, destination, verbose) {
	checkDefined(filepath, "filepath", "Io.copyFolder");
	checkDefined(destination, "destination", "Io.copyFolder");
	
	if(verbose === undefined) {
		verbose = false;
	}
	
	return SpecsIo.copyFolder(Io.getPath(filepath), Io.getPath(destination), verbose);
}

/**
 * Returns the given path, without extension.
 *
 * @param {string|#java.io.File} path 
 */
Io.removeExtension = function(path) {
	return SpecsIo.removeExtension(path);
}

/**
 * Returns the extension of the given path.
 *
 * @param {string|#java.io.File} path 
 */
Io.getExtension = function(path) {
	return SpecsIo.getExtension(path);
}

Io.writeFile = writeFile;
Io.readFile = readFile;

Io.appendFile = function(path, content) {
	var file = new java.io.File(path);
	SpecsIo.append(file,content);
}

/**
 * Returns the path of 'targetFile', relative to 'baseFile'. 
 * 
 * If the file does not share a common ancestor with baseFile, returns undefined.
 */
Io.getRelativePath = function(targetFile, baseFile) {
	var relativePath = SpecsIo.getRelativePath(Io.getPath(targetFile), Io.getPath(baseFile));
	
	if(Io.getPath(relativePath).isAbsolute()) {
		return undefined;
	}
	
	return relativePath;
}

/**
 * 	The system-dependent path-separator.
 */
Io.getPathSeparator = function() {
	return java.io.File.pathSeparator;
}

Io.md5 = function(fileOrBaseFolder, optionalFile) {
	return SpecsIo.getMd5(Io.getPath(fileOrBaseFolder, optionalFile));
}

Io.getWorkingFolder = function() {
	return SpecsIo.getWorkingDir();
}
