var Io = {};

/**
 * Creates a folder.
 *
 */
function mkdir(path) {
	return SpecsIo.mkdir(path);
}

Io.mkdir = mkdir;


Io.getPath = function(fileOrBaseFolder, optionalFile) {
	if(optionalFile === undefined) {
		return new java.io.File(fileOrBaseFolder); 
	}
	
	return new java.io.File(fileOrBaseFolder, optionalFile);
}	

Io.getPaths = function(baseFolder) {
	checkDefined(baseFolder, "baseFolder", "Io.getPaths");
	
	var baseFolderFile = Io.getPath(baseFolder);
	
	// For each argument after the baseFolder, treat it as a different file/glob
	var files = [];
	for(argument of arguments) {
		var foundFiles = SpecsIo.getFilesWithPattern(baseFolderFile, argument);
		
		for(file of foundFiles) {
			files.push(file);
		}
	}
	
	return files;
}

/**
 * Returns a List with a string for each line of the given file
 */
function readLines(fileOrBaseFolder, optionalFile) {
	return LaraIo.readLines(Io.getPath(fileOrBaseFolder, optionalFile));	
}

Io.readLines = readLines;

function deleteFile(fileOrBaseFolder, optionalFile) {
	var file = Io.getPath(fileOrBaseFolder, optionalFile);
	if(!Io.isFile(file)) {
		// Skipping file
		return;
	}

	return LaraIo.deleteFile(Io.getPath(fileOrBaseFolder, optionalFile));
}

Io.deleteFile = deleteFile;

/**
 * Each argument is a file that will be deleted.
 */
Io.deleteFiles = function() {
	for(argument of arguments) {
		deleteFile(argument);
	}
}

/**
 * @return true if and only if the file denoted by this abstract pathname exists and is a normal file; false otherwise
 */
Io.isFile = function(path) {
	if(typeof path === "string") {
		path = Io.getPath(path);
	}
	
	return path.isFile();
}

/**
 * @return true if and only if the file denoted by this abstract pathname exists and is a folder; false otherwise
 */
Io.isFolder = function(path) {
	if(typeof path === "string") {
		path = Io.getPath(path);
	}
	
	return path.isDirectory();
}

Io.readJson = function(path) {
	return fileToJSON(path);
}

Io.writeJson = function(path, object) {
	JSONtoFile(path, object);
}

Io.copyFile = function(filepath, destination) {
	checkDefined(filepath, "filepath", "Io.copyFile");
	checkTrue(Io.isFile(filepath), "Io.copyFile: given filepath '"+filepath+"' is not a file");
	
	return SpecsIo.copy(Io.getPath(filepath), Io.getPath(destination));
}

Io.removeExtension = function(file) {
	return SpecsIo.removeExtension(file);
}