/* Generated By:JJTree: Do not edit this line. ASTArrayLiteral.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.objects.Enums.Types;

public class ASTArrayLiteral extends SimpleNode {
	public ASTArrayLiteral(int id) {
		super(id);
	}

	public ASTArrayLiteral(LARAEcmaScript p, int id) {
		super(p, id);
	}

	@Override
	public Object organize(Object obj) {
		if (children != null) {
			for (final Node child : children) {
				((SimpleNode) child).organize(obj);
			}
		}
		return null;
	}

	@Override
	public Types getExpressionType() {
		// TODO Auto-generated method stub
		return Types.Array;
	}

	@Override
	public void toXML(Document doc, Element parent) {
		int count = 0;
		final Element litArray = doc.createElement("literal");
		litArray.setAttribute("type", Types.Array.toString());
		parent.appendChild(litArray);
		if (children != null) {
			for (final Node child : children) {
				if (child instanceof ASTEmptyPositions) {
					final int emptyPoss = ((ASTEmptyPositions) child).getCount();
					for (int i = count; i < count + emptyPoss; i++) {
						final Element propertyEl = doc.createElement("key");
						propertyEl.setAttribute("name", "" + i);
						litArray.appendChild(propertyEl);
						/*
						 * Element emptyExpr = doc.createElement("expression");
						 * propertyEl.appendChild(emptyExpr);
						 */
					}
					count += emptyPoss;
					continue;
				}
				final Element propertyEl = doc.createElement("key");
				propertyEl.setAttribute("name", "" + count);
				litArray.appendChild(propertyEl);
				((SimpleNode) child).toXML(doc, propertyEl);
				count++;
			}
		}
	}
}
/*
 * JavaCC - OriginalChecksum=9c60781d05feb5378330379cb23c2f61 (do not edit this
 * line)
 */
