/* Generated By:JJTree: Do not edit this line. ASTOrExpressionSequence.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.objects.Enums.Types;

public class ASTOrExpressionSequence extends SimpleNode {
	public ASTOrExpressionSequence(int id) {
		super(id);
	}

	public ASTOrExpressionSequence(LARAEcmaScript p, int id) {
		super(p, id);
	}

	@Override
	public Object organize(Object obj) {
		final SimpleNode left = (SimpleNode) children[0];
		left.organize(this);
		for (int i = 1; i < children.length; i += 2) {
			final ASTOperator operator = (ASTOperator) children[i];
			operator.organize(this);
			final SimpleNode right = (SimpleNode) children[i + 1];
			right.organize(this);
			operator.setReturnType(Types.Boolean);
		}
		return obj;
	}

	@Override
	public void toXML(Document doc, Element parent) {
		SimpleNode left = (SimpleNode) children[0];
		ASTOperator operator = (ASTOperator) children[1];
		Element opEl = doc.createElement("op");
		opEl.setAttribute("name", operator.getTag());
		parent.appendChild(opEl);
		left.toXML(doc, opEl);
		// opEl.setAttribute("type", operator.getReturnType().name());
		int i = 2;
		while (i + 1 < children.length) {
			left = (SimpleNode) children[i++];
			operator = (ASTOperator) children[i++];
			final Element newOpEl = doc.createElement("op");
			newOpEl.setAttribute("name", operator.getTag());
			opEl.appendChild(newOpEl);
			opEl = newOpEl;
			// opEl.setAttribute("type", operator.getReturnType().name());
			left.toXML(doc, opEl);
		}
		final SimpleNode right = (SimpleNode) children[i];
		right.toXML(doc, opEl);
	}

	@Override
	public Types getExpressionType() {
		return Types.Boolean;
	}

}
/*
 * JavaCC - OriginalChecksum=672bba3e5cbcb55cd86b548c2fbe249e (do not edit this
 * line)
 */
