/* Generated By:JJTree: Do not edit this line. ASTAssignmentExpression.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import java.util.HashMap;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.LaraC;
import larac.objects.Variable;

public class ASTAssignmentExpression extends SimpleNode {
    public ASTAssignmentExpression(int id) {
        super(id);
    }

    public ASTAssignmentExpression(LARAEcmaScript p, int id) {
        super(p, id);
    }

    public SimpleNode solveInitializeAssignment(HashMap<String, Variable> vars) {
        final String operator = ((ASTOperator) getChild(1)).value.toString();
        final String varName = getChild(0).value.toString();

        if (!operator.equals("=")) {
            throw newException("Variable initizalization only supports the assignment operator \"=\"\n" + "\tUsed: \""
                    + operator + "\" for variable \"" + varName + "\"");
        }
        SimpleNode rhs = getChild(2);
        if (!(rhs instanceof ASTAssignmentExpression)) {
            if (vars.containsKey(varName)) {
                throw newException("Variable '" + varName + "' already defined on this scope");
            }

            vars.put(varName, new Variable(varName));// , expr));
            return rhs;
        }
        final ASTAssignmentExpression assignExpr = getChildAs(2, ASTAssignmentExpression.class);
        final SimpleNode expr = assignExpr.solveInitializeAssignment(vars);
        if (vars.containsKey(varName)) {
            throw newException("Variable '" + varName + "' already defined on this scope");
        }
        vars.put(varName, new Variable(varName));
        expr.organize(this);
        return expr;
    }

    @Override
    public void declareGlobal(LaraC lara) {
        organize(null);
        getLara().aspectIR().addGlobalStatement(this, lara.getLaraPath());
    }

    @Override
    public Object organize(Object obj) {
        final SimpleNode assignee = getChild(0);
        final ASTOperator operator = getChildAs(1, ASTOperator.class);
        final SimpleNode assignment = getChild(2);
        operator.organize(this);
        assignment.organize(this);
        assignee.organizeLHS(assignment.getExpressionType());
        return null;
    }

    @Override
    public void globalToXML(Document doc, Element parent) {
        final Element statEl = doc.createElement("declaration");
        statEl.setAttribute("name", "expr");
        statEl.setAttribute("coord", getCoords());
        addXMLComent(statEl);
        parent.appendChild(statEl);
        final Element exprEl = doc.createElement("expression");
        statEl.appendChild(exprEl);
        toXML(doc, exprEl);
    }

    @Override
    public void toXML(Document doc, Element parent) {

        final SimpleNode assignee = getChild(0);
        final ASTOperator operator = getChildAs(1, ASTOperator.class);
        final SimpleNode assignment = getChild(2);
        final Element assignEl = doc.createElement("op");
        // addCoords(assignEl);
        parent.appendChild(assignEl);
        assignEl.setAttribute("name", operator.getTag());
        assignee.toXML(doc, assignEl);
        if (assignment instanceof ASTAction) {
            ((ASTAction) assignment).actionExprToXML(doc, assignEl, false);
        } else {
            assignment.toXML(doc, assignEl);
        }
    }
}
/*
 * JavaCC - OriginalChecksum=53aa17881f524d3978dc513d5dc2e458 (do not edit this
 * line)
 */
