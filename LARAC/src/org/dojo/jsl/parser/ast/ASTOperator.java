/* Generated By:JJTree: Do not edit this line. ASTOperator.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import larac.objects.Enums.AssignOperator;
import larac.objects.Enums.BinaryOperator;
import larac.objects.Enums.Types;
import larac.objects.Enums.UnaryOperator;

public class ASTOperator extends SimpleNode {
    private String tag;
    private Types returnType;

    public ASTOperator(int id) {
	super(id);
    }

    public ASTOperator(LARAEcmaScript p, int id) {
	super(p, id);
    }

    @Override
    public Object organize(Object obj) {
	if (obj instanceof ASTBinaryExpressionSequence && BinaryOperator.contains(value.toString())) {
	    tag = BinaryOperator.getOpTag(value.toString()).toString();

	} else if (obj instanceof ASTAssignmentExpression && AssignOperator.contains(value.toString())) {
	    tag = AssignOperator.getOpTag(value.toString()).toString();
	} else if (obj instanceof ASTUnaryExpression && UnaryOperator.contains(value.toString())) {
	    tag = UnaryOperator.getOpTag(value.toString()).toString();
	} else if (obj instanceof ASTAndExpressionSequence && BinaryOperator.contains(value.toString())) {
	    tag = BinaryOperator.getOpTag(value.toString()).toString();
	} else if (obj instanceof ASTOrExpressionSequence && BinaryOperator.contains(value.toString())) {
	    tag = BinaryOperator.getOpTag(value.toString()).toString();
	}
	if (tag == null) {
	    throw newException("Operator \"" + value + "\" not suported on " + obj);
	}
	return null;
    }

    /**
     * @return the tag
     */
    public String getTag() {
	if (tag == null) {
	    this.organize(parent);
	}
	return tag;
    }

    /**
     * @param tag
     *            the tag to set
     */
    public void setTag(String tag) {
	this.tag = tag;
    }

    /**
     * @return the returnType
     */
    public Types getReturnType() {
	return returnType;
    }

    /**
     * @param returnType
     *            the returnType to set
     */
    public void setReturnType(Types returnType) {
	this.returnType = returnType;
    }

    /**
     * @param returnType
     *            the returnType to set
     */
    public void setReturnType(Types returnType, Types returnType2) {
	this.returnType = Types.maxType(returnType, returnType2);
    }

    @Override
    public String toSource(int indentation) {
	return indent(indentation) + value.toString();
    }
}
/*
 * JavaCC - OriginalChecksum=59c67cb5edd2fdd095ebcb001516032d (do not edit this
 * line)
 */
