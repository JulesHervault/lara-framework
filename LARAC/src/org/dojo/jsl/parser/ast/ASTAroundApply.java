/* Generated By:JJTree: Do not edit this line. ASTAroundApply.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.objects.Variable;

public class ASTAroundApply extends SimpleNode {
    private String name;
    private String when;
    private ASTJavaScript js;
    private ASTApply apply;

    public ASTAroundApply(int id) {
        super(id);
    }

    public ASTAroundApply(LARAEcmaScript p, int id) {
        super(p, id);
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    /**
     * @param when
     *            the when to set
     */
    public void setWhen(String when) {
        this.when = when;
    }

    /**
     * @return the when
     */
    public String getWhen() {
        return when;
    }

    @Override
    public String toString() {
        return LARAEcmaScriptTreeConstants.jjtNodeName[id] + " [" + name + "," + when + "]";
    }

    @Override
    public Object organize(Object obj) {
        // final ASTAspectDef aspectDef = ((ASTAspectDef) obj);
        final ASTAspectDef aspectDef = getAspectDefForDeclStmt("Around apply");
        setJs(null);

        if (getChildren().length == 1) {
            if (getWhen().equals("before")) {
                aspectDef.setLastbeforeWithNoLabel(this);
            } else {
                final ASTApply astApply = aspectDef.getLastApplyDecl();
                if (astApply == null) {
                    getLara().warnln("No apply for the after statement. This statement will not take place.");
                    return null;
                }
                astApply.setAfter(this);
            }
            setJs((ASTJavaScript) getChildren()[0]);
        } else {
            ((ASTApplies) getChildren()[0]).organize(this);
            setJs((ASTJavaScript) getChildren()[1]);
        }
        if (getWhen().equals("before")) {
            js.organize(this);
        }
        return null;
    }

    @Override
    public void toXML(Document doc, Element parent) {
        if (((SimpleNode) getChildren()[getChildren().length - 1]).children == null) {
            return;
        }
        final Element codeEl = doc.createElement("code");

        if (getWhen().equals("before")) {
            codeEl.setAttribute("desc", "before");
        } else {
            codeEl.setAttribute("desc", "after");
        }
        parent.appendChild(codeEl);
        ((SimpleNode) getChildren()[getChildren().length - 1]).toXML(doc, codeEl);
    }

    /**
     * @param js
     *            the js to set
     */
    public void setJs(ASTJavaScript js) {
        this.js = js;
    }

    /**
     * @return the js
     */
    public ASTJavaScript getJs() {
        return js;
    }

    /**
     * @param apply
     *            the apply to set
     */
    public void setApply(ASTApply apply) {
        this.apply = apply;
    }

    /**
     * @return the apply
     */
    public ASTApply getApply() {
        return apply;
    }

    @Override
    public Variable lookup(String var) {

        if (getWhen().equals("after")) {
            ASTJavaScript localJS = (ASTJavaScript) apply.getChildren()[1];
            if (localJS.getHMVars().containsKey(var)) {
                final Variable v = localJS.getHMVars().get(var);
                return v;
            }
            final SimpleNode before = apply.getBefore();
            if (before != null) {
                localJS = (ASTJavaScript) before.getChildren()[0];
                if (localJS.getHMVars().containsKey(var)) {
                    final Variable v = localJS.getHMVars().get(var);
                    return v;
                }
            }
            final Variable v = super.lookup(var);
            if (v == null) {
                throw newException("'" + var + "' is undefined for 'after' apply '" + apply.getName() + "'");
            }
            return v;
        }
        return super.lookup(var);
    }

    @Override
    public Variable lookupNoError(String var) {
        if (getWhen().equals("after")) {
            ASTJavaScript localJS = (ASTJavaScript) apply.getChildren()[1];
            if (localJS.getHMVars().containsKey(var)) {
                final Variable v = localJS.getHMVars().get(var);
                return v;
            }
            final SimpleNode before = apply.getBefore();
            if (before != null) {
                localJS = (ASTJavaScript) before.getChildren()[0];
                if (localJS.getHMVars().containsKey(var)) {
                    final Variable v = localJS.getHMVars().get(var);
                    return v;
                }
            }
        }
        return super.lookupNoError(var);
    }

    private boolean first = true;

    public void organizeForApply(ASTApply astApply) {
        setApply(astApply);
        if (first) {
            first = false;
            js.organize(this);
        } else {
            js.secondOrganize(null);
        }
        setApply(null);
    }

}
/*
 * JavaCC - OriginalChecksum=b3dd2ec6505ff47e381b776339c261d0 (do not edit this
 * line)
 */
