/* Generated By:JJTree: Do not edit this line. ASTIfStatement.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

public class ASTIfStatement extends SimpleNode {
	public ASTIfStatement(int id) {
		super(id);
	}

	public ASTIfStatement(LARAEcmaScript p, int id) {
		super(p, id);
	}

	@Override
	public Object organize(Object obj) {
		final SimpleNode condition = (SimpleNode) getChildren()[0];
		condition.organize(obj);
		final SimpleNode thenExp = (SimpleNode) getChildren()[1];
		thenExp.organize(obj);
		if (getChildren().length == 3) {
			final SimpleNode elseExp = (SimpleNode) getChildren()[2]; // Could
																		// be
																		// another
																		// IF
			elseExp.organize(obj);
		}
		return obj;
	}

	@Override
	public void toXML(Document doc, Element parent) {
		final Element stmtEl = doc.createElement("statement");
		stmtEl.setAttribute("name", "if");
		stmtEl.setAttribute("coord", getCoords());
		if (!label.isEmpty()) {
			stmtEl.setAttribute("label", label);
		}
		parent.appendChild(stmtEl);

		final Element condEl = doc.createElement("expression");
		condEl.setAttribute("desc", "condition");
		final SimpleNode condition = (SimpleNode) getChildren()[0];
		condition.toXML(doc, condEl);
		stmtEl.appendChild(condEl);

		final Element thenEl = doc.createElement("code");
		thenEl.setAttribute("desc", "then");
		final SimpleNode thenExp = (SimpleNode) getChildren()[1];
		thenExp.toXML(doc, thenEl);
		stmtEl.appendChild(thenEl);

		final Element elseEl = doc.createElement("code");
		elseEl.setAttribute("desc", "else");
		if (getChildren().length == 3) {
			final SimpleNode elseExp = (SimpleNode) getChildren()[2];
			elseExp.toXML(doc, elseEl);
		}
		stmtEl.appendChild(elseEl);
	}
}
/*
 * JavaCC - OriginalChecksum=29274ce9440edfe2601e9b72912ce2c8 (do not edit this
 * line)
 */
