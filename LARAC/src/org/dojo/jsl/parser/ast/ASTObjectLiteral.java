/* Generated By:JJTree: Do not edit this line. ASTObjectLiteral.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import java.util.LinkedHashMap;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.objects.Enums.Types;

public class ASTObjectLiteral extends SimpleNode {
	private final LinkedHashMap<String, SimpleNode> props = new LinkedHashMap<>();

	public ASTObjectLiteral(int id) {
		super(id);
	}

	public ASTObjectLiteral(LARAEcmaScript p, int id) {
		super(p, id);
	}

	@Override
	public Object organize(Object obj) {
		// System.out.println(children);
		if (children == null) {
			return null;
		}

		for (final Node child : children) {
			final ASTLiteralField litField = (ASTLiteralField) child;
			final String prop = ((SimpleNode) litField.children[0]).value.toString();
			// if (props.containsKey(prop))
			// throw newException("The object already contains the property \""
			// + prop + "\".");
			final SimpleNode init = ((SimpleNode) litField.children[1]);
			init.organize(obj);
			props.put(prop, init);
		}
		return null;
	}

	@Override
	public Types getExpressionType() {
		return Types.Object;
	}

	@Override
	public void toXML(Document doc, Element parent) {
		final Element literalEl = doc.createElement("literal");
		literalEl.setAttribute("type", Types.Object.toString());
		parent.appendChild(literalEl);
		for (final String prop : props.keySet()) {
			final Element propEl = doc.createElement("key");
			propEl.setAttribute("name", prop);
			literalEl.appendChild(propEl);
			props.get(prop).toXML(doc, propEl);
		}
	}
}
/*
 * JavaCC - OriginalChecksum=8a6932db8f6cab10e111b9097896eeee (do not edit this
 * line)
 */
