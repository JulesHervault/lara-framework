/* Generated By:JJTree: Do not edit this line. ASTArrowFunctionExpression.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.objects.Enums.Types;

public class ASTArrowFunctionExpression extends SimpleNode {
    // private LinkedHashMap<String, Variable> args = new LinkedHashMap<>();
    private final List<String> params = new ArrayList<>();
    private Types myType = Types.ArrowFN;
    private int pos = 0;
    private boolean toXML = true;

    private static final int PARAM_LIST_IDX = 0;
    private static final int BODY_IDX = 1;

    public ASTArrowFunctionExpression(int id) {
        super(id);
    }

    public ASTArrowFunctionExpression(LARAEcmaScript p, int id) {
        super(p, id);
    }

    @Override
    public Object organize(Object obj) {
        // System.out.println("ARROW F:\n" + dumpToString(""));

        if (!(children[0] instanceof ASTFormalParameterList)) {
            throw newException("Cannot declare an arrow function without a parameter list.");
        }

        final ASTFormalParameterList paramList = ((ASTFormalParameterList) children[PARAM_LIST_IDX]);
        if (paramList.children != null) {
            for (final Node argChild : paramList.children) {
                final String argName = ((ASTIdentifier) argChild).value.toString();
                // if (args.containsKey(argName)) {
                // throw newException(
                // "Function \"" + funcName + "\" contains variables with the same name: " + argName);
                // }
                // final Variable argVar = new Variable(argName);
                // args.put(argName, argVar);
                params.add(argName);
            }
        }

        var body = children[BODY_IDX];
        // System.out.println("BODY CLASS: " + body.getClass());
        // System.out.println("DUMP: " + ((SimpleNode) body).dumpToString(""));

        // Code to execute
        ((SimpleNode) children[BODY_IDX]).organize(obj);
        ((SimpleNode) children[BODY_IDX]).insertTag = false;

        /*
        } else {
        if (children[0] instanceof ASTIdentifier) {
        funcName = ((ASTIdentifier) children[0]).value.toString();
        pos++;
        }
        final ASTFormalParameterList paramList = ((ASTFormalParameterList) children[pos]);
        if (paramList.children != null) {
        for (final Node argChild : paramList.children) {
        final String argName = ((ASTIdentifier) argChild).value.toString();
        if (args.containsKey(argName)) {
        throw newException("Function expression contains variables with the same name: " + argName);
        }
        final Variable argVar = new Variable(argName);
        args.put(argName, argVar);
        params.add(argName);
        }
        }
        ((SimpleNode) children[++pos]).organize(obj);
        ((SimpleNode) children[pos]).insertTag = false;
        }
        */
        return obj;
    }

    @Override
    public void toXML(Document doc, Element parent) {

        if (!toXML) {
            return;
        }

        final Element opEl = doc.createElement("op");
        opEl.setAttribute("name", "ArrowFN");
        parent.appendChild(opEl);
        // Element litEl = doc.createElement("literal");
        // litEl.setAttribute("value", funcName);
        // litEl.setAttribute("type", Types.String.toString());
        // opEl.appendChild(litEl);
        // for (final String id : args.keySet()) {
        for (final String id : params) {
            Element litEl = doc.createElement("literal");
            litEl.setAttribute("value", id);
            litEl.setAttribute("type", Types.String.toString());
            opEl.appendChild(litEl);
        }
        ((SimpleNode) children[BODY_IDX]).toXML(doc, opEl);
        toXML = false;

    }

    @Override
    public Types getExpressionType() {
        return Types.ArrowFN;
    }

}
/* JavaCC - OriginalChecksum=acb0bcefa142160f1b60353031289f5b (do not edit this line) */
