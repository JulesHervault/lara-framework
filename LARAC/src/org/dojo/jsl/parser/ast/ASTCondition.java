/* Generated By:JJTree: Do not edit this line. ASTCondition.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

public class ASTCondition extends SimpleNode {

    public ASTCondition(int id) {
        super(id);
    }

    public ASTCondition(LARAEcmaScript p, int id) {
        super(p, id);
    }

    @Override
    public Object organize(Object obj) {
        // final ASTAspectDef aspectDef = ((ASTAspectDef) obj);
        final ASTAspectDef aspectDef = this.getAspectDefForDeclStmt("Condition");

        if (getChildren().length == 1) { // The For Node does not exist,
                                         // lastApplyWithNoLabel
            final ASTApply apply = aspectDef.getLastApplyWithNoLabel();
            if (apply == null) {
                throw newException("No apply exists before the condition!");
            }
            final ASTFor astFor = new ASTFor(33);
            final ASTIdentifier id = new ASTIdentifier(35);
            final SimpleNode condChild = (SimpleNode) getChildren()[0];
            id.jjtSetValue(apply.getName());
            astFor.associateChild(id, 0);
            associateChild(astFor, 0);
            associateChild(condChild, 1);
        }
        final ASTFor astFor = (ASTFor) getChildren()[0];
        for (final Node child : astFor.getChildren()) {
            final ASTIdentifier id = (ASTIdentifier) child;
            final ASTApply apply = aspectDef.findApplyByName(id.value.toString());
            if (apply == null) {
                throw newException("The apply \"" + id.value + "\" cannot be found");
            }
            apply.setCondition(this);
            apply.organizeCondition();
            if (aspectDef.putCondition(apply.getName(), this) != null) {
                throw newException("Condition for '" + apply.getName() + "' already defined.");
            }

        }
        return null;
    }

    @Override
    public void toXML(Document doc, Element parent) {
        final Element condEl = doc.createElement("expression");
        parent.appendChild(condEl);
        condEl.setAttribute("desc", condEl.getAttribute("name") + "_condition");
        ((SimpleNode) getChildren()[1]).toXML(doc, condEl);
    }
}
/*
 * JavaCC - OriginalChecksum=3a902eaa20b3a304d9421568aaf582d9 (do not edit this
 * line)
 */
