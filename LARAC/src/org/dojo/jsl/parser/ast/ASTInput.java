/* Generated By:JJTree: Do not edit this line. ASTInput.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import java.util.HashMap;

import larac.objects.Variable;

public class ASTInput extends SimpleNode {
    public ASTInput(int id) {
	super(id);
    }

    public ASTInput(LARAEcmaScript p, int id) {
	super(p, id);
    }

    @Override
    public Object organize(Object obj) {
	final ASTAspectDef asp = (ASTAspectDef) parent;

	// if (!asp.getInputs().isEmpty()) {
	if (asp.getInputsNode() != null) {
	    throw newException("Can only have one input section!");
	}
	asp.setInputsNode(this);
	//
	if (getChildren() == null) {
	    return null;
	}
	((SimpleNode) getChildren()[0]).organize(this);
	return null;
    }

    @Override
    public HashMap<String, Variable> getHMVars() {
	return ((ASTAspectDef) parent).getInputs();
    }

    @Override
    public String toSource(int indentation) {

	String source = indent(indentation) + "input";
	if (getChildren() == null) {
	    return source + " end";
	}
	SimpleNode child = getChild(0);
	if (child instanceof ASTVariableDeclarationList) {
	    if (child.getChildren() != null) {
		for (final Node n : child.getChildren()) {
		    source += "\n" + ((SimpleNode) n).toSource(indentation + 1);
		}
	    }
	} else {
	    source += "\n" + child.toSource(indentation + 1);
	}
	return source + "\n" + indent(indentation) + "end";
    }
}
/*
 * JavaCC - OriginalChecksum=4e4b76905016ac2c5b045b1fa76fe04f (do not edit this
 * line)
 */
