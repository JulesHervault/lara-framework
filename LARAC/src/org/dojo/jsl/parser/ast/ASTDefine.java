/* Generated By:JJTree: Do not edit this line. ASTDefine.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import java.util.Iterator;
import java.util.Map;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.objects.Enums.Types;
import larac.utils.xml.entity.ActionArgument;

public class ASTDefine extends SimpleNode {
    private String target;
    private String attr;
    private SimpleNode assignment;

    public ASTDefine(int id) {
        super(id);
    }

    public ASTDefine(LARAEcmaScript p, int id) {
        super(p, id);
    }

    /**
     * @param target
     *            the target to set
     */
    public void setTarget(String target) {
        this.target = target;
    }

    /**
     * @return the target
     */
    public String getTarget() {
        return target;
    }

    @Override
    public String toString() {
        return LARAEcmaScriptTreeConstants.jjtNodeName[id] + " [" + target + "]";
    }

    @Override
    /* FIXME */
    public Object organize(Object obj) {

        // LaraC larac = getLara();
        // if (!larac.languageSpec().getActionModel().contains("def"))
        // throw newException("Action 'def' is not available.");
        final ASTAction act = (ASTAction) parent;
        act.setMethod("def");
        act.setArguments(getLara().getOrganizer().createDefParameters());
        final Map<String, ActionArgument> arguments = act.getArguments();
        if (jjtGetChild(0) instanceof ASTFunctionCallParameters) {
            final ASTFunctionCallParameters params = (ASTFunctionCallParameters) jjtGetChild(0);
            if (params.areNamed) {
                for (final Node param : params.getChildren()) {
                    final ASTNamedArgument na = (ASTNamedArgument) param;
                    if (!arguments.containsKey(na.value)) {
                        throw newException("The argument '" + na.value + "' does not exist for action 'def'");
                    }
                    final ActionArgument actArg = arguments.get(na.value);
                    na.organize(obj);
                    actArg.setValue((SimpleNode) na.jjtGetChild(0));
                }
            } else {
                if (params.getChildren() == null || params.getChildren().length != arguments.size()) {
                    throw newException("Illegal number of arguments for action 'def'");
                }
                int pos = 0;
                for (final ActionArgument actArg : arguments.values()) {
                    actArg.setValue((SimpleNode) params.jjtGetChild(pos++));
                }
            }
        } else {
            if (!(children[0] instanceof ASTIdentifier)) {
                throw newException("The joinpoint 'def' action can only have an identifier in the left hand side!");
            }

            final Iterator<ActionArgument> it = arguments.values().iterator();
            it.next().setValue(((ASTIdentifier) children[0]).value.toString());
            assignment = ((SimpleNode) children[1]);
            assignment.organize(obj);
            it.next().setValue(assignment);
            // arguments.get("value").setValue(assignment);
        }
        return null;
    }

    @Override
    public void toXML(Document doc, Element parent) {

        final Element statEl = doc.createElement("statement");
        statEl.setAttribute("name", "expr");
        statEl.setAttribute("coord", getCoords());
        parent.appendChild(statEl);
        final Element exprEl = doc.createElement("expression");
        statEl.appendChild(exprEl);
        final Element callEl = doc.createElement("call");
        exprEl.appendChild(callEl);

        final Element methodEl = doc.createElement("method");
        callEl.appendChild(methodEl);
        final Element propertyEl = doc.createElement("property");
        methodEl.appendChild(propertyEl);

        String jpTarget = "";
        final ASTApply apply = (ASTApply) getParentById(LARAEcmaScriptTreeConstants.JJTAPPLY);
        if (((SimpleNode) this.parent).value != null) {
            jpTarget = ((SimpleNode) this.parent).value.toString();
        } else {
            jpTarget = apply.getSelectLastJPVar();
        }

        final Element idEl = doc.createElement("id");
        idEl.setAttribute("name", jpTarget);
        idEl.setAttribute("type", Types.Joinpoint.toString());
        propertyEl.appendChild(idEl);
        final Element literalDefEl = doc.createElement("literal");
        literalDefEl.setAttribute("value", "def");
        literalDefEl.setAttribute("type", Types.String.toString());
        propertyEl.appendChild(literalDefEl);

        final Element arg1El = doc.createElement("argument");
        callEl.appendChild(arg1El);
        final Element literalTypeEl = doc.createElement("literal");
        literalTypeEl.setAttribute("value", attr);
        literalTypeEl.setAttribute("type", Types.String.toString());
        arg1El.appendChild(literalTypeEl);

        final Element arg2El = doc.createElement("argument");
        callEl.appendChild(arg2El);
        assignment.toXML(doc, arg2El);
    }
}
/*
 * JavaCC - OriginalChecksum=13cc41d6a267e0c9ef2669bd1422a111 (do not edit this
 * line)
 */
