/* Generated By:JJTree: Do not edit this line. ASTGeneratorFunctionExpression.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.objects.Enums.Types;
import larac.objects.Variable;

public class ASTGeneratorFunctionExpression extends SimpleNode {
    private LinkedHashMap<String, Variable> args = new LinkedHashMap<>();
    private final List<String> params = new ArrayList<>();
    private Types myType = Types.GFN;
    private int pos = 0;
    private boolean toXML = true;
    private String funcName = "";

    public ASTGeneratorFunctionExpression(int id) {
        super(id);
    }

    public ASTGeneratorFunctionExpression(LARAEcmaScript p, int id) {
        super(p, id);
    }

    @Override
    public Object organize(Object obj) {

        if (parent instanceof ASTExpressionStatement) {
            ((ASTExpressionStatement) parent).insertTag = false;
            if (!(children[0] instanceof ASTIdentifier)) {
                throw newException("Cannot declare a function without an identifier.");
            }
            funcName = ((ASTIdentifier) children[0]).value.toString();
            final Variable var = new Variable(funcName);
            // var.setInitialize(this);
            myType = Types.GenFNDecl;
            var.setType(Types.GenFNDecl);
            final HashMap<String, Variable> parentVars = ((SimpleNode) parent).getHMVars();
            if (parentVars.containsKey(funcName)) {
                throw newException("Identifier '" + funcName + "' already in use");
            }
            parentVars.put(funcName, var);
            final ASTFormalParameterList paramList = ((ASTFormalParameterList) children[1]);
            if (paramList.children != null) {
                for (final Node argChild : paramList.children) {
                    final String argName = ((ASTIdentifier) argChild).value.toString();
                    if (args.containsKey(argName)) {
                        throw newException(
                                "Function \"" + funcName + "\" contains variables with the same name: " + argName);
                    }
                    final Variable argVar = new Variable(argName);
                    args.put(argName, argVar);
                    params.add(argName);
                }
            }
            ((SimpleNode) children[2]).organize(obj);
            ((SimpleNode) children[2]).insertTag = false;

            toXML = true;
        } else {
            if (children[0] instanceof ASTIdentifier) {
                funcName = ((ASTIdentifier) children[0]).value.toString();
                pos++;
            }
            final ASTFormalParameterList paramList = ((ASTFormalParameterList) children[pos]);
            if (paramList.children != null) {
                for (final Node argChild : paramList.children) {
                    final String argName = ((ASTIdentifier) argChild).value.toString();
                    if (args.containsKey(argName)) {
                        throw newException("Function expression contains variables with the same name: " + argName);
                    }
                    final Variable argVar = new Variable(argName);
                    args.put(argName, argVar);
                    params.add(argName);
                }
            }
            ((SimpleNode) children[++pos]).organize(obj);
            ((SimpleNode) children[pos]).insertTag = false;
        }
        return obj;
    }

    @Override
    public void toXML(Document doc, Element parent) {
        if (!toXML) {
            return;
        }
        if (myType.equals(Types.GenFNDecl)) {
            final Element statEl = doc.createElement("statement");
            statEl.setAttribute("name", "genfndecl");
            statEl.setAttribute("coord", getCoords());
            parent.appendChild(statEl);
            final Element exprEl = doc.createElement("expression");
            statEl.appendChild(exprEl);
            final Element opEl = doc.createElement("op");
            opEl.setAttribute("name", "GFN");
            exprEl.appendChild(opEl);
            Element litEl = doc.createElement("literal");
            litEl.setAttribute("value", funcName);
            litEl.setAttribute("type", Types.String.toString());
            opEl.appendChild(litEl);
            // for (final String id : args.keySet()) {
            for (final String id : params) {
                litEl = doc.createElement("literal");
                litEl.setAttribute("value", id);
                litEl.setAttribute("type", Types.String.toString());
                opEl.appendChild(litEl);
            }
            ((SimpleNode) children[2]).toXML(doc, opEl);
            toXML = false;
            return;
        }
        final Element opEl = doc.createElement("op");
        opEl.setAttribute("name", "GFN");
        parent.appendChild(opEl);
        Element litEl = doc.createElement("literal");
        litEl.setAttribute("value", funcName);
        litEl.setAttribute("type", Types.String.toString());
        opEl.appendChild(litEl);
        // for (final String id : args.keySet()) {
        for (final String id : params) {
            litEl = doc.createElement("literal");
            litEl.setAttribute("value", id);
            litEl.setAttribute("type", Types.String.toString());
            opEl.appendChild(litEl);
        }
        ((SimpleNode) children[pos]).toXML(doc, opEl);
        toXML = false;
    }

    @Override
    public Types getExpressionType() {
        return Types.GFN;
    }

    /**
     * @param args
     *            the args to set
     */
    public void setArgs(LinkedHashMap<String, Variable> args) {
        this.args = args;
    }

    /**
     * @return the args
     */
    public LinkedHashMap<String, Variable> getArgs() {
        return args;
    }

    @Override
    public Variable lookup(String var) {
        if (args.containsKey(var)) {
            return args.get(var);
        }
        return ((SimpleNode) parent).lookup(var);
    }

    @Override
    public Variable lookupNoError(String var) {
        if (args.containsKey(var)) {
            return args.get(var);
        }
        return ((SimpleNode) parent).lookupNoError(var);
    }

    @Override
    public HashMap<String, Variable> getHMVars() {
        return args;
    }

    public String getFuncName() {
        return funcName;
    }
}
/* JavaCC - OriginalChecksum=8ab604c185541f2c5b862d427e704d3a (do not edit this line) */
