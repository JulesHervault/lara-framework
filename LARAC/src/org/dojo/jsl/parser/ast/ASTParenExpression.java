/* Generated By:JJTree: Do not edit this line. ASTParenExpression.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.objects.Enums.BinaryOperator;

public class ASTParenExpression extends SimpleNode {
	public ASTParenExpression(int id) {
		super(id);
	}

	public ASTParenExpression(LARAEcmaScript p, int id) {
		super(p, id);
	}

	@Override
	public Object organize(Object obj) {
		if (getChildren() != null) {
			for (final Node child : getChildren()) {
				((SimpleNode) child).organize(obj);
			}
		}
		return null;
	}

	@Override
	public void toXML(Document doc, Element parent) {
		if (getChildren() == null) {
			return;
		}
		if (children[0] instanceof ASTExpressionList) {
			final ASTExpressionList exprList = (ASTExpressionList) children[0];
			Element auxEl = doc.createElement("aux");
			((SimpleNode) exprList.children[0]).toXML(doc, auxEl);
			auxEl = (Element) auxEl.getFirstChild();
			for (int i = 1; i < exprList.children.length; i++) {
				final Element commaEl = doc.createElement("op");
				commaEl.setAttribute("name", BinaryOperator.COMMA.toString());
				commaEl.appendChild(auxEl);
				((SimpleNode) exprList.children[i]).toXML(doc, commaEl);
				auxEl = commaEl;
			}
			parent.appendChild(auxEl);
		} else {
			for (final Node child : getChildren()) {
				((SimpleNode) child).toXML(doc, parent);
			}
		}
	}
}
/*
 * JavaCC - OriginalChecksum=7ed48279809a76b7276997fbebe6ca6a (do not edit this
 * line)
 */
