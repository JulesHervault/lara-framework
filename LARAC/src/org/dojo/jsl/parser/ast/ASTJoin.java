/* Generated By:JJTree: Do not edit this line. ASTJoin.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.objects.Enums.JoinOperator;
import larac.objects.Variable;

public class ASTJoin extends SimpleNode {
    public SimpleNode leftObj;
    public SimpleNode rightObj;

    public ASTJoin(int id) {
        super(id);
    }

    public ASTJoin(LARAEcmaScript p, int id) {
        super(p, id);
    }

    @Override
    public Object organize(Object obj) {
        final ASTAspectDef aspectDef = (ASTAspectDef) obj;
        // final ASTAspectDef aspectDef = getAspectDefForDeclStmt("Join ");
        final SimpleNode leftChild = (SimpleNode) getChildren()[0];
        final SimpleNode rightChild = (SimpleNode) getChildren()[1];
        final ASTSelect parentSelect = (ASTSelect) getParentById(LARAEcmaScriptTreeConstants.JJTSELECT);
        leftObj = setAJoinSide(aspectDef, leftChild, parentSelect);
        rightObj = setAJoinSide(aspectDef, rightChild, parentSelect);
        return null;
    }

    private SimpleNode setAJoinSide(ASTAspectDef aspectDef, SimpleNode pcChild, ASTSelect parentSelect) {
        SimpleNode pcExpr;
        if (pcChild instanceof ASTJoin) {
            pcChild.organize(aspectDef);
            pcExpr = pcChild;
        } else {
            final ASTIdentifier ident = (ASTIdentifier) pcChild;
            pcExpr = aspectDef.getSelect(ident.value.toString());
            if (pcExpr == null) {
                throw newException("Select '" + ident.value + "' is undefined");
            }

            // Undesired code, since it was doing nothing useful and was only
            // creating bugs!
            // ASTSelect leftSelect = (ASTSelect) pcExpr;
            // for (String key : leftSelect.getPointcuts().keySet())
            // parentSelect.putPointcut(key, leftSelect.getPointcut(key));
        }
        return pcExpr;
    }

    @Override
    public Object organizeFirst(Object obj, int i) {
        return organize(obj);
    }

    @Override
    public void toXML(Document doc, Element parent) {
        final JoinOperator tag = JoinOperator.getOpTag(value.toString());

        final Element joinEl = doc.createElement("op");
        joinEl.setAttribute("name", tag.toString());
        parent.appendChild(joinEl);
        if (getChildren()[0] instanceof ASTIdentifier) {
            createPointcutElement(doc, joinEl, 0);
        } else {
            ((SimpleNode) getChildren()[0]).toXML(doc, joinEl);
        }
        if (getChildren()[1] instanceof ASTIdentifier) {
            createPointcutElement(doc, joinEl, 1);
        } else {
            ((SimpleNode) getChildren()[1]).toXML(doc, joinEl);
        }
    }

    private void createPointcutElement(Document doc, Element joinEl, int i) {
        final Element pcEl = doc.createElement("id");
        pcEl.setAttribute("name", ((SimpleNode) getChildren()[i]).value.toString());
        // pcEl.setAttribute("type", "JoinSet");
        joinEl.appendChild(pcEl);
    }

    @Override
    public Variable lookupLastJPVariable() {

        return rightObj.lookupLastJPVariable();
    }

}
/*
 * JavaCC - OriginalChecksum=a7f54d8229a9a8b322a56732cea28a8e (do not edit this
 * line)
 */
