/* Generated By:JJTree: Do not edit this line. ASTCodeDef.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;

import javax.xml.bind.DatatypeConverter;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.LaraC;
import larac.objects.Enums;
import larac.objects.Enums.Types;
import larac.objects.Variable;
import larac.utils.OrganizeUtils;

public class ASTCodeDef extends SimpleNode {
    private String name;
    // private String filePath;
    private String language;
    private String code;
    private ArrayList<String> parametersInCode = new ArrayList<>();
    private ArrayList<String> parameters = new ArrayList<>();

    public ASTCodeDef(int id) {
        super(id);
    }

    public ASTCodeDef(LARAEcmaScript p, int id) {
        super(p, id);
    }

    public void setName(String image) {
        name = image;
    }

    public String getName() {
        return name;
    }

    /**
     * @param language
     *            the language to set
     */
    public void setLanguage(String language) {
        this.language = language;
    }

    /**
     * @return the language
     */
    public String getLanguage() {
        return language;
    }

    /**
     * @param code
     *            the code to set
     */
    public void setCode(String code) {
        // Remove trailing new lines
        if (code.startsWith("\r")) {
            code = code.substring(1);
        }
        if (code.startsWith("\n")) {
            code = code.substring(1);
        }

        if (code.endsWith("\n")) {
            code = code.substring(0, code.length() - 1);
        }
        if (code.endsWith("\r")) {
            code = code.substring(0, code.length() - 1);
        }

        this.code = code;
    }

    /**
     * @return the code
     */
    public String getCode() {
        return code;
    }

    @Override
    public String toString() {
        return LARAEcmaScriptTreeConstants.jjtNodeName[id] + " [" + name
                + /* ","+code+ */"," + language + "]";
    }

    @Override
    public void declareGlobal(LaraC lara) {
        validateParameters(lara);
        lara.aspectIR().addGlobalElement(name, this);
    }

    @Override
    public Object organize(Object obj) {
        final Variable var = new Variable(name, Types.FNDecl);
        final HashMap<String, Variable> parentVars = ((SimpleNode) parent).getHMVars();
        if (parentVars.containsKey(name)) {
            throw newException("Identifier '" + name + "' already in use");
        }
        parentVars.put(name, var);
        validateParameters(getLara());
        return null;
    }

    private void validateParameters(final LaraC lara) {
        // lara.aspectIR().addCodeDef(name, this);

        // if(language.equals("native") || language.equals("LARA"))
        // ;//TODO transform lara code into target code (lara.language?)

        findParametersInCode();
        if (getChildren() == null) {
            if (!parametersInCode.isEmpty()) {
                lara.warnln(
                        " Code parameters in \"" + getName() + "\" will be undefined if no arguments are declared.");
            }
            return;
        }

        final ASTFormalParameterList args = (ASTFormalParameterList) getChildren()[0];
        parameters = args.getArguments();
        verifyCodeParameters();
    }

    private void verifyCodeParameters() {
        for (final String paramInCode : parametersInCode) {
            if (!parameters.contains(paramInCode)) {
                throw newException("Codedef \"" + name + "\" does not contain parameter \"" + paramInCode + "\"");
            }
        }

    }

    /**
     * Searches the string containing the code for parameters\n Those parameters are shown in the AspectIR
     */
    private void findParametersInCode() {
        parametersInCode = new ArrayList<>(OrganizeUtils.getTagValues(code));
    }

    public String printIR() {
        getLara().println("codedef<" + language + "> code \"" + code + "\", parameters: " + parametersInCode
                + ", arguments: " + parameters);
        return null;
    }

    /**
     * @return the codeParameters
     */
    public ArrayList<String> getCodeParameters() {
        return parametersInCode;
    }

    /**
     * @param codeParameters
     *            the codeParameters to set
     */
    public void setCodeParameters(ArrayList<String> codeParameters) {
        parametersInCode = codeParameters;
    }

    /**
     * @return the arguments
     */
    public ArrayList<String> getArguments() {
        return parameters;
    }

    /**
     * @param arguments
     *            the arguments to set
     */
    public void setArguments(ArrayList<String> arguments) {
        parameters = arguments;
    }

    public int argsLength() {
        return parameters.size();
    }

    @Override
    public void globalToXML(Document doc, Element parent) {
        toXML(doc, parent, "declaration");
    }

    @Override
    public void toXML(Document doc, Element parent) {
        toXML(doc, parent, "statement");

    }

    private void toXML(Document doc, Element parent, String elementType) {
        final Element statEl = doc.createElement(elementType);
        statEl.setAttribute("name", "fndecl");
        statEl.setAttribute("coord", getCoords());
        addXMLComent(statEl);
        parent.appendChild(statEl);
        final Element exprEl = doc.createElement("expression");
        statEl.appendChild(exprEl);
        final Element opEl = doc.createElement("op");
        opEl.setAttribute("name", "FN");
        exprEl.appendChild(opEl);
        Element litEl = doc.createElement("literal");
        litEl.setAttribute("value", name);
        litEl.setAttribute("type", Types.String.toString());
        opEl.appendChild(litEl);
        for (final String argChild : parameters) {
            litEl = doc.createElement("literal");
            litEl.setAttribute("value", argChild);
            litEl.setAttribute("type", Types.String.toString());
            opEl.appendChild(litEl);
        }
        final Element bodyEl = doc.createElement("body");
        opEl.appendChild(bodyEl);
        final Element returnEl = doc.createElement("statement");
        returnEl.setAttribute("name", "return");
        returnEl.setAttribute("coord", getCoords());
        bodyEl.appendChild(returnEl);
        final Element returnExprEl = doc.createElement("expression");
        returnEl.appendChild(returnExprEl);
        codeBlock2XML(doc, returnExprEl);

    }
    /*
     * <body>
          <statement coord="tiago.lara:11:1:11:8" name="return">
            <expression>
              <literal desc="code" type="object">
                <key name="code">
                  <literal type="code" value="W1thXV0gPSBbW2JdXQ0KCQ=="/>
                </key>
                <key name="[[a]]">
                  <id name="a"/>
                </key>
                <key name="[[b]]">
                  <id name="b"/>
                </key>
              </literal>
            </expression>
          </statement>
        </body>
     */

    private void codeBlock2XML(Document doc, Element parent) {

        final Element literalEl = doc.createElement("literal");
        literalEl.setAttribute("type", Types.Object.toString());
        literalEl.setAttribute("desc", Types.Code.toString());
        parent.appendChild(literalEl);
        final Element propEl = doc.createElement("key");
        propEl.setAttribute("name", "code");
        literalEl.appendChild(propEl);
        addCodeDef(doc, propEl);

        for (final String prop : parametersInCode) {
            final Element propertyKeyEl = doc.createElement("key");
            literalEl.appendChild(propertyKeyEl);
            propertyKeyEl.setAttribute("name", Enums.SYMBOL_BEGIN + prop + Enums.SYMBOL_END);
            final Element idEl = doc.createElement("id");
            propertyKeyEl.appendChild(idEl);
            idEl.setAttribute("name", prop);
        }
    }

    private void addCodeDef(Document doc, final Element propEl) {
        final Element stringEl = doc.createElement("literal");
        stringEl.setAttribute("type", Types.Code.toString());
        propEl.appendChild(stringEl);
        try {
            final String codeBase64 = DatatypeConverter.printBase64Binary(code.getBytes("UTF-8"));
            stringEl.setAttribute("value", codeBase64);
        } catch (final UnsupportedEncodingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
}
/*
 * JavaCC - OriginalChecksum=43cf3768fe8173b715404b4f3d29764c (do not edit this
 * line)
 */
