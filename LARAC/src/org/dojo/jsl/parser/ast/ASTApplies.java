/* Generated By:JJTree: Do not edit this line. ASTApplies.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

public class ASTApplies extends SimpleNode {
    public ASTApplies(int id) {
        super(id);
    }

    public ASTApplies(LARAEcmaScript p, int id) {
        super(p, id);
    }

    @Override
    public Object organize(Object obj) {
        final ASTAroundApply around = ((ASTAroundApply) parent);
        // final ASTAspectDef aspectDef = ((ASTAspectDef) around.parent);
        final ASTAspectDef aspectDef = getAspectDefForDeclStmt("Around apply");
        if (around.getWhen().equals("before")) {
            for (final Node child : getChildren()) {
                final String applyTarget = ((ASTIdentifier) child).value.toString();
                final ASTApply apply = aspectDef.findApplyByName(applyTarget);
                if (apply == null) {
                    throw newException("Unknown apply \"" + applyTarget + "\" used on before statement");
                }
                apply.setBefore(around);
            }
        } else if (around.getWhen().equals("after")) {
            for (final Node child : getChildren()) {
                final String applyTarget = ((ASTIdentifier) child).value.toString();
                final ASTApply apply = aspectDef.findApplyByName(applyTarget);
                if (apply == null) {
                    throw newException("Unknown apply \"" + applyTarget + "\" used on after statement");
                }
                apply.setAfter(around);
            }
        }
        return null;
    }
}
/*
 * JavaCC - OriginalChecksum=89e8ac0f17c045fb469de2bc42f87667 (do not edit this
 * line)
 */
