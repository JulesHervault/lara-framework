/* Generated By:JJTree: Do not edit this line. ASTOutput.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import java.util.HashMap;

import larac.objects.Variable;

public class ASTOutput extends SimpleNode {

    public ASTOutput(int id) {
	super(id);
    }

    public ASTOutput(LARAEcmaScript p, int id) {
	super(p, id);
    }

    @Override
    public Object organize(Object obj) {
	final ASTAspectDef asp = (ASTAspectDef) parent;
	if (asp.getOutputsNode() != null) {
	    // if (!asp.getOutputs().isEmpty()) {
	    throw newException("Can only have one output section!");
	}
	asp.setOutputsNode(this);
	if (getChildren() == null) {
	    return null;
	}
	final ASTAspectDef aspect = (ASTAspectDef) obj;
	((SimpleNode) getChildren()[0]).organize(aspect.getOutputs(), aspect.getInputs());
	return null;
    }

    @Override
    public HashMap<String, Variable> getHMVars() {
	return ((ASTAspectDef) parent).getOutputs();
    }

    @Override
    public String toSource(int indentation) {

	String source = indent(indentation) + "output";
	if (getChildren() == null) {
	    return source + " end";
	}
	SimpleNode child = getChild(0);
	if (child instanceof ASTVariableDeclarationList) {
	    if (child.getChildren() != null) {
		for (final Node n : child.getChildren()) {
		    source += "\n" + ((SimpleNode) n).toSource(indentation + 1);
		}
	    }
	} else {
	    source += "\n" + child.toSource(indentation + 1);
	}
	return source + "\n" + indent(indentation) + "end";
    }
}
/*
 * JavaCC - OriginalChecksum=86064c04cf6bb75b2b5038c23b32713a (do not edit this
 * line)
 */
