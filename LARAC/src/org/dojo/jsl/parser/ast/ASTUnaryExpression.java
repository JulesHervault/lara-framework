/* Generated By:JJTree: Do not edit this line. ASTUnaryExpression.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.objects.Enums.Types;

public class ASTUnaryExpression extends SimpleNode {
    public ASTUnaryExpression(int id) {
        super(id);
    }

    public ASTUnaryExpression(LARAEcmaScript p, int id) {
        super(p, id);
    }

    @Override
    public Object organize(Object obj) {
        final SimpleNode unary = (SimpleNode) getChildren()[1];
        unary.organize(this);
        final ASTOperator operator = (ASTOperator) getChildren()[0];
        operator.organize(this);
        operator.setReturnType(unary.getExpressionType());
        return obj;
    }

    @Override
    public void toXML(Document doc, Element parent) {
        final Element opEl = toXMLCommon(doc, parent);
        final SimpleNode unary = (SimpleNode) getChildren()[1];
        unary.toXML(doc, opEl);
    }

    private Element toXMLCommon(Document doc, Element parent) {
        final ASTOperator operator = (ASTOperator) getChildren()[0];
        final Element opEl = doc.createElement("op");
        opEl.setAttribute("name", operator.getTag());
        parent.appendChild(opEl);
        if (!operator.getReturnType().equals(Types.Undefined)) {
            opEl.setAttribute("type", operator.getReturnType().toString());
        }
        return opEl;
    }

    @Override
    public Types getExpressionType() {

        return ((SimpleNode) getChildren()[1]).getExpressionType();
    }
}
/*
 * JavaCC - OriginalChecksum=970e1ce05c9ee12da7f7ce34b02241b5 (do not edit this
 * line)
 */
