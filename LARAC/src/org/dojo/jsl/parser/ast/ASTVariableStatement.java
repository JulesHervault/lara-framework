/* Generated By:JJTree: Do not edit this line. ASTVariableStatement.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.LaraC;

public class ASTVariableStatement extends SimpleNode {
    public ASTVariableStatement(int id) {
        super(id);
    }

    public ASTVariableStatement(LARAEcmaScript p, int id) {
        super(p, id);
    }

    @Override
    public Object organize(Object obj, Object obj2) {
        for (final Node child : getChildren()) {
            ((SimpleNode) child).organize(obj, obj2);
        }
        return null;
    }

    @Override
    public void declareGlobal(LaraC lara) {
        getSimpleNodeChildren().forEach(n -> n.declareGlobal(lara));
    }

    @Override
    public Object organize(Object obj) {
        for (final Node child : getChildren()) {
            ((SimpleNode) child).organize(this);
        }
        return null;
    }

    @Override
    public void toXML(Document doc, Element parent) {

        final Element statementDeclEl = doc.createElement("statement");
        statementDeclEl.setAttribute("name", "vardecl");
        statementDeclEl.setAttribute("coord", getCoords());
        addXMLComent(statementDeclEl);
        if (!label.isEmpty()) {
            statementDeclEl.setAttribute("label", label);
        }

        for (final Node child : getChildren()) {
            ((SimpleNode) child).toXML(doc, statementDeclEl);
        }
        if (statementDeclEl.hasChildNodes()) {
            parent.appendChild(statementDeclEl);
        }
    }
}
/*
 * JavaCC - OriginalChecksum=c2a03cbc033a9517e3ea8ffd52530488 (do not edit this
 * line)
 */
