/* Generated By:JJTree: Do not edit this line. ASTAllocationExpression.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.LaraC;
import larac.objects.Enums.Types;

public class ASTAllocationExpression extends SimpleNode {

    /**
     * @return the args
     */
    public ASTFunctionCallParameters getArgs() {
        return args;
    }

    /**
     * @param args
     *            the args to set
     */
    public void setArgs(ASTFunctionCallParameters args) {
        this.args = args;
    }

    /**
     * @return the allocType
     */
    public Types getAllocType() {
        return allocType;
    }

    /**
     * @param allocType
     *            the allocType to set
     */
    public void setAllocType(Types allocType) {
        this.allocType = allocType;
    }

    /**
     * @return the methodID
     */
    public String getMethodID() {
        return methodID;
    }

    /**
     * @param methodID
     *            the methodID to set
     */
    public void setMethodID(String methodID) {
        this.methodID = methodID;
    }

    private Types allocType = Types.getDefault();
    private String methodID;
    private ASTFunctionCallParameters args;

    public ASTAllocationExpression(int id) {
        super(id);
    }

    public ASTAllocationExpression(LARAEcmaScript p, int id) {
        super(p, id);
    }

    @Override
    public Object organize(Object obj) {
        if (children[0] instanceof ASTIdentifier) {
            final String instance = ((ASTIdentifier) children[0]).value.toString();
            methodID = instance;
        } else if (children[0] instanceof ASTFunctionExpression) {
            final ASTFunctionExpression funcExpr = ((ASTFunctionExpression) children[0]);
            funcExpr.organize(obj);
        } else {
            final ASTCompositeReference comp = ((ASTCompositeReference) children[0]);
            comp.setAlloc(this);
        }
        if (args != null) {
            args.organize(this);
        }
        final ASTAspectDef asp = getAspectDef(methodID);
        if (asp != null) {
            allocType = Types.Aspect;
            methodID = asp.getLara().getPrefix() + asp.getName();
        } else {
            allocType = Types.Object;
        }
        /*
         * OLD -> bug! //LaraC lara = getLara();
         * if(lara.system.hasItem("Constructors", methodID)) allocType =
         * Types.Object; else{ ASTAspectDef asp = getAspectDef(methodID); if(asp
         * == null) throw newException(
         * "Bad Object/Aspect used in the allocation expression: "+methodID);
         * allocType = Types.Aspect;
         * 
         * methodID = asp.getLara().prefix+asp.getName(); } /
         **/
        return null;
    }

    private ASTAspectDef getAspectDef(String instance) {
        final LaraC lara = getLara();
        ASTAspectDef asp = lara.aspectIR().getAspectDef(instance);
        if (asp == null) {
            asp = lara.aspectIR().getImportedAspectDef(instance);
        }
        return asp;
    }

    @Override
    public Types getExpressionType() {
        return allocType;
    }

    @Override
    public void toXML(Document doc, Element parent) {
        final Element newEl = doc.createElement("op");
        newEl.setAttribute("name", "NEW");
        parent.appendChild(newEl);

        if (allocType == Types.Object && !(children[0] instanceof ASTIdentifier)) {
            ((SimpleNode) children[0]).toXML(doc, newEl);
            return;
        }
        final Element callEl = doc.createElement("call");
        newEl.appendChild(callEl);
        final Element methodEl = doc.createElement("method");
        callEl.appendChild(methodEl);

        final Element idEl = doc.createElement("id");
        idEl.setAttribute("name", methodID);
        // idEl.setAttribute("type", allocType.toString());
        methodEl.appendChild(idEl);
        if (args != null) {
            args.toXML(doc, callEl);
        }
    }
}
/*
 * JavaCC - OriginalChecksum=b64db1759614cdc2b435b70f761571e3 (do not edit this
 * line)
 */
