/* Generated By:JJTree: Do not edit this line. ASTTo.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import java.util.ArrayList;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

public class ASTTo extends SimpleNode {
	ArrayList<ASTSelect> selects = new ArrayList<>();

	public ASTTo(int id) {
		super(id);
	}

	public ASTTo(LARAEcmaScript p, int id) {
		super(p, id);
	}

	@Override
	public Object organize(Object obj) {
		final ASTApply apply = ((ASTApply) parent);
		final ASTJavaScript js = apply.getBody();
		if (children[0] instanceof ASTJoin) {
			final ASTSelect sel = new ASTSelect(LARAEcmaScriptTreeConstants.JJTSELECT);
			sel.associateChild(((ASTJoin) children[0]), 0);
			sel.organizeJoinInApply(getParentById(LARAEcmaScriptTreeConstants.JJTASPECTDEF));
			((ASTJoin) children[0]).organize(apply.parent);
			selects.add(sel);

			js.organize(apply);
			associateChild(((ASTJoin) children[0]), 0);
		} else {
			final String id = ((ASTIdentifier) getChildren()[0]).value.toString();
			final ASTSelect select = apply.getSelect(id);
			if (select == null) {
				throw newException("Select '" + id + "' is undefined");
			}
			selects.add(select);
			js.organize(apply);
		}
		for (int i = 1; i < getChildren().length; i++) {

			if (children[i] instanceof ASTJoin) {
				final ASTSelect sel = new ASTSelect(LARAEcmaScriptTreeConstants.JJTSELECT);
				sel.associateChild(((ASTJoin) children[i]), 0);
				sel.organizeJoinInApply(getParentById(LARAEcmaScriptTreeConstants.JJTASPECTDEF));
				((ASTJoin) children[i]).organize(apply.parent);
				selects.add(sel);
				js.secondOrganize(sel);
				associateChild(((ASTJoin) children[i]), i);
			} else {
				final String id = ((ASTIdentifier) getChildren()[i]).value.toString();
				final ASTSelect select = apply.getSelect(id);
				if (select == null) {
					throw newException("Select '" + id + "' is undefined");
				}
				selects.add(select);
				js.secondOrganize(select);
			}
		}
		return null;
	}

	public void organizeCondition(ASTApply astApply) {
		final ASTApply apply = ((ASTApply) parent);
		((SimpleNode) apply.getCondition().getChildren()[1]).organize(apply);

	}

	public void toXML(Document doc, Element applyEl, int i) {
		final SimpleNode child = (SimpleNode) children[i];
		final Element toEl = doc.createElement("expression");
		applyEl.appendChild(toEl);
		if (child instanceof ASTIdentifier) {
			final Element pcEl = doc.createElement("id");
			pcEl.setAttribute("name", child.value.toString());
			// pcEl.setAttribute("type", "JoinSet");
			toEl.appendChild(pcEl);
		} else {
			child.toXML(doc, toEl);
		}

	}

	public String getLastJoinPointVar(int toPosition) {
		return selects.get(toPosition).getLastJPVariable().getName();
	}
}
/*
 * JavaCC - OriginalChecksum=7f29d2de88bf3b3dcd7b3887fc9e9770 (do not edit this
 * line)
 */
