/* Generated By:JJTree: Do not edit this line. ASTIdentifier.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import java.util.ArrayList;
import java.util.LinkedHashMap;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.objects.Enums;
import larac.objects.Enums.Types;
import larac.objects.Variable;

public class ASTIdentifier extends SimpleNode {

    private ASTCodeDef codeDef;
    private final ArrayList<String> codeParams = new ArrayList<>();
    private final LinkedHashMap<String, SimpleNode> codeMapping = new LinkedHashMap<>();

    /**
     * @return the var
     */
    public Variable getVar() {
        return var;
    }

    /**
     * @param var
     *            the var to set
     */
    public void setVar(Variable var) {
        this.var = var;
    }

    private Variable var;
    private String name;

    public ASTIdentifier(int id) {
        super(id);
    }

    public ASTIdentifier(LARAEcmaScript p, int id) {
        super(p, id);
    }

    public void setName(String image) {
        name = image;
        value = image;
    }

    public String getName() {
        return name;
    }

    @Override
    public Object organize(Object obj) {
        /*	if (isTemplate) {
        codeDef = getLara().aspectIR().getCodedef(name);
        if (codeDef == null) {
        		throw newException("Codedef '" + name + "' does not exist.");
        }
        if (codeDef.argsLength() != 0) {
        		throw newException("Codedef '" + name + "' requires " + codeDef.argsLength() + " arguments");
        }
        
        return Types.Code;
        	}
        */
        if (value.toString().startsWith("$")) {
            var = new Variable(value.toString(), Types.Joinpoint);
        } else {
            var = new Variable(value.toString());
        }

        if (var == null) {
            throw newException("'" + value + "' is undefined");
        }

        return var.getType();
    }

    @Override
    public void secondOrganize(ASTSelect sel) {
        if (organize(null) == null) {
            throw newException("The following variable does not exist: " + value);
        }
    }

    @Override
    public void toXML(Document doc, Element parent) {

        if (name.equals(Types.Undefined.toString())) {
            final Element literalEl = doc.createElement("literal");
            literalEl.setAttribute("value", name);
            literalEl.setAttribute("type", Types.Undefined.toString());
            parent.appendChild(literalEl);
            return;
        }

        if (var == null) {

            final Element literalEl = doc.createElement("id");
            literalEl.setAttribute("name", name);
            // literalEl.setAttribute("type", Types.String.toString());
            parent.appendChild(literalEl);
        } else {
            var.toXML(doc, parent);
        }
    }

    @Override
    public Types getExpressionType() {
        return var.getType();
    }

    public void getFields(ArrayList<String> fields) {
        if (getChildren() == null) {
            return;
        }
        final ASTIdentifier id = (ASTIdentifier) getChildren()[0];
        fields.add(id.value.toString());
        id.getFields(fields);
    }

    @Override
    public void organizeLHS(Types type) {

        var = lookupNoError(value.toString());

        if (var != null) {
            return;
        }

        var = new Variable(value.toString(), type);
        getHMVars().put(value.toString(), var);
    }

    @Override
    public String getMethodId() {
        return value.toString();
    }

    @Override
    public String getVarName() {
        return value.toString();
    }

    @Override
    public void setIdVar(Variable var) {
        this.var = var;
    }

    @Override
    public void toXMLTemplate(Document doc, Element parent) {
        final Element literalEl = doc.createElement("literal");
        literalEl.setAttribute("type", Types.Object.toString());
        parent.appendChild(literalEl);
        final Element propEl = doc.createElement("key");
        propEl.setAttribute("name", "'code'");
        literalEl.appendChild(propEl);
        final Element stringEl = doc.createElement("literal");
        stringEl.setAttribute("type", Types.String.toString());
        propEl.appendChild(stringEl);
        stringEl.setAttribute("value", codeDef.getName() + ".code");

        for (final String prop : codeMapping.keySet()) {
            final SimpleNode replace = codeMapping.get(prop);
            final Element propertyKeyEl = doc.createElement("key");
            literalEl.appendChild(propertyKeyEl);
            propertyKeyEl.setAttribute("name", Enums.SYMBOL_BEGIN + prop + Enums.SYMBOL_END);
            replace.toXML(doc, propertyKeyEl);
        }
        codeTemplateArgumentsToXML(doc, literalEl, codeParams);
    }

}
/*
 * JavaCC - OriginalChecksum=8697559df6eb5c3e8d25c919cffa1e63 (do not edit this
 * line)
 */
