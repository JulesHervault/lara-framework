/* Generated By:JJTree: Do not edit this line. ASTPropertyIdentifierReference.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.LaraC;
import larac.objects.Enums.Types;

public class ASTPropertyIdentifierReference extends SimpleNode {
    public ASTPropertyIdentifierReference(int id) {
        super(id);
    }

    public ASTPropertyIdentifierReference(LARAEcmaScript p, int id) {
        super(p, id);
    }

    @Override
    public void toXML(Document doc, Element parent) {
        final String name = ((ASTIdentifier) children[0]).getName();
        final Element literalEl = doc.createElement("literal");
        literalEl.setAttribute("value", name);
        literalEl.setAttribute("type", Types.String.toString());
        parent.appendChild(literalEl);
        // ((SimpleNode)children[0]).toXML(doc, parent);
    }

    @Override
    public Object organize(Object obj) {
        return null;
    }

    @Override
    public String toSource(int indentation) {

        return indent(indentation) + ((ASTIdentifier) children[0]).toSource();
    }

    @Override
    public void organizePointcutReference(ASTPointcut pc) {
        final LaraC lara = getLara();
        if (lara.languageSpec().getArtifacts().getAttribute(pc.getType(),
                ((SimpleNode) children[0]).value.toString()) == null) {
            throw newException("The joinpoint \"" + pc.getReference() + "\" does not contain the attribute \""
                    + ((SimpleNode) children[0]).value.toString() + "\"");
        }
    }

    @Override
    public void organizeActionReference(ASTPointcut pc) {
        final LaraC lara = getLara();
        if (!lara.languageSpec().getActionModel().contains(((SimpleNode) children[0]).value.toString())) {
            throw newException("The action \"" + ((SimpleNode) children[0]).value.toString() + "\" does not exist");
        }
    }

    @Override
    public String getMethodId() {
        return ((SimpleNode) children[0]).getMethodId();
    }

    @Override
    public String getVarName() {
        return ((SimpleNode) children[0]).getVarName();
    }
}
/*
 * JavaCC - OriginalChecksum=ce74fbfcc89103c0721fd0ebd16fcba1 (do not edit this
 * line)
 */
