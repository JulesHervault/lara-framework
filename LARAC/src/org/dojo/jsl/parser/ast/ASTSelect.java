/* Generated By:JJTree: Do not edit this line. ASTSelect.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import java.util.HashMap;

import org.dojo.jsl.parser.ast.utils.LARACConstantPool;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.objects.Enums.Types;
import larac.objects.Variable;
import tdrc.utils.HashBag;

public class ASTSelect extends SimpleNode {
    private String name;
    private Variable lastJPVariable;
    private int hiddenCount = 0;
    private HashMap<String, ASTPointcut> pointcuts = new HashMap<>();
    private final HashBag<String> repeatedPointcutsBag = new HashBag<>();

    public ASTSelect(int id) {
        super(id);
    }

    public ASTSelect(LARAEcmaScript p, int id) {
        super(p, id);
    }

    @Override
    public Object organize(Object obj) {
        // final ASTAspectDef aspectDef = ((ASTAspectDef) obj);
        final ASTAspectDef aspectDef = this.getAspectDefForDeclStmt("Select");
        if (name == null) {
            name = aspectDef.getName() + "_select_" + aspectDef.getSelectCount();
            aspectDef.setLastSelectWithNoLabel(this);
        }

        /*
         * Variable var = lookup(name); if(var != null){
         * System.out.println("WHAT??"); throw newException("variable '"+name+
         * "' used in 'select' is already defined."); }
         */
        final SimpleNode child = (SimpleNode) getChildren()[0];
        if (child instanceof ASTJoin) {
            child.organize(aspectDef);
        } else {
            child.organizeFirst(this, 0);
            // aspectDef.getLara().languageSpec().getJpModel().setLastPointcutType(null);
        }

        if (aspectDef.putSelect(name, this) != null) {
            throw newException("select '" + name + "' already defined.");
        }
        setLastJPVariable(lookupLastJPVariable());
        getHMVars().put(name, new Variable(name, Types.Joinpoint));
        return null;
    }

    public Object organizeJoinInApply(Object obj) {
        final ASTAspectDef aspectDef = ((ASTAspectDef) obj);
        // final ASTAspectDef aspectDef = this.getAspectDefForDeclStmt("Select");
        final SimpleNode child = (SimpleNode) getChildren()[0];
        child.organize(aspectDef);
        setLastJPVariable(lookupLastJPVariable());
        return null;
    }

    @Override
    public Variable lookupLastJPVariable() {
        final SimpleNode child = (SimpleNode) getChildren()[0];
        return child.lookupLastJPVariable();
    }

    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name
     *            the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return LARAEcmaScriptTreeConstants.jjtNodeName[id] + (name != null ? " [" + name + "]" : "");
    }

    /**
     * @return the pointcuts
     */
    public HashMap<String, ASTPointcut> getPointcuts() {
        return pointcuts;
    }

    public ASTPointcut getPointcut(String pc) {
        return pointcuts.get(pc);
    }

    /**
     * @param pointcuts
     *            the pointcuts to set
     */
    public void setPointcuts(HashMap<String, ASTPointcut> pointcuts) {
        this.pointcuts = pointcuts;
    }

    public void putPointcut(String key, ASTPointcut pointcut) {
        if (pointcuts.containsKey(key)) {
            final ASTPointcut oldPC = pointcuts.get(key);
            // System.out.println("KEY: " + key);
            // System.out.println("REPEATED REF: " + oldPC.getReference());
            final int newVal = repeatedPointcutsBag.get(key);
            repeatedPointcutsBag.put(key);
            oldPC.setReference(key + LARACConstantPool.DISABLED_TAG + newVal);
            pointcuts.put(oldPC.getReference(), oldPC);
        }
        pointcuts.put(key, pointcut);
    }

    public int getHiddenCount() {

        return hiddenCount++;
    }

    @Override
    public void toXML(Document doc, Element parent) {
        final Element selectEl = doc.createElement("statement");
        selectEl.setAttribute("name", "select");
        selectEl.setAttribute("label", getName());
        selectEl.setAttribute("coord", getCoords());
        parent.appendChild(selectEl);
        /*
         * UNCOMMENT IF NAME REQUIRED! * Element nameExprEl =
         * doc.createElement("expression"); selectEl.appendChild(nameExprEl);
         * Element nameLitEl = doc.createElement("literal");
         * nameLitEl.setAttribute("value", getName());
         * nameLitEl.setAttribute("type", Types.String.toString());
         * nameExprEl.appendChild(nameLitEl); /
         **/
        if ((SimpleNode) getChildren()[0] instanceof ASTPointcut) {
            ((SimpleNode) getChildren()[0]).toXML(doc, selectEl);
        } else {
            final Element exprEl = doc.createElement("expression");
            selectEl.appendChild(exprEl);
            ((SimpleNode) getChildren()[0]).toXML(doc, exprEl);
        }
    }

    @Override
    public boolean hasFilter() {
        final SimpleNode child = (SimpleNode) getChildren()[0];
        return child.hasFilter();
    }

    @Override
    public Element getFilterElement(Document doc) {

        final SimpleNode child = (SimpleNode) getChildren()[0];
        return child.getFilterElement(doc);
    }

    public void setLastJPVariable(Variable lastJPVariable) {
        this.lastJPVariable = lastJPVariable;
    }

    public Variable getLastJPVariable() {
        return lastJPVariable;
    }

}
/*
 * JavaCC - OriginalChecksum=35d276dbfb06bfd94dbf01f8f69a2519 (do not edit this
 * line)
 */
