/* Generated By:JJTree: Do not edit this line. ASTCatchClause.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.objects.Enums.Types;
import larac.objects.Variable;

public class ASTCatchClause extends SimpleNode {
	private Variable exception;

	public ASTCatchClause(int id) {
		super(id);
	}

	public ASTCatchClause(LARAEcmaScript p, int id) {
		super(p, id);
	}

	@Override
	public Object organize(Object obj) {
		final String exceptionName = ((SimpleNode) children[0]).value.toString();
		exception = new Variable(exceptionName, Types.Exception);
		((SimpleNode) children[1]).organize(obj);
		return null;
	}

	@Override
	public Variable lookup(String var) {
		if (exception.getName().equals(var)) {
			return exception;
		}
		return ((SimpleNode) parent).lookup(var);
	}

	@Override
	public Variable lookupNoError(String var) {
		if (exception.getName().equals(var)) {
			return exception;
		}
		return ((SimpleNode) parent).lookupNoError(var);
	}

	@Override
	public void toXML(Document doc, Element parent) {
		final Element exprEl = doc.createElement("expression");
		exprEl.setAttribute("desc", "catch_id");
		parent.appendChild(exprEl);
		final Element idEl = doc.createElement("id");
		idEl.setAttribute("name", exception.getName());
		exprEl.appendChild(idEl);
		final Element codeEl = doc.createElement("code");
		codeEl.setAttribute("desc", "catch");
		parent.appendChild(codeEl);
		((SimpleNode) children[1]).toXML(doc, codeEl);
	}
}
/*
 * JavaCC - OriginalChecksum=b9082663e2a539546622639966ef2f1a (do not edit this
 * line)
 */
