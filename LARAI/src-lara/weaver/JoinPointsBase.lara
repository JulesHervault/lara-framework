import weaver.Weaver;

/**
 * Object which provides low-level join point-related methods.
 * @constructor
 */
function JoinPoints() {
}

/**
 * 
 * @return {$jp} the current root node of the AST
 */
JoinPoints.prototype.root = function() {
	return Weaver.getWeaverEngine().getRootJp();
}

/**
 * 
 * @return {$jp[]} the children of the given node
 */
 /*
JoinPoints.prototype.children = function($jp, jpType) {
	throw "_WeaverHelper.children: not implemented";
}
*/

/**
 * 
 * @return {$jp[]} the descendants of the given node
 */
 /*
JoinPoints.prototype.descendants = function($jp, jpType) {
	throw "_WeaverHelper.descendants: not implemented";
}
*/



/**
 * 
 * @return {$jp[]} all the children of the given node
 */
JoinPoints.prototype._all_children = function($jp) {
	throw "JoinPoints._all_children: not implemented";
}


/**
 * 
 * @return {$jp[]} all the descendants of the given node
 */
JoinPoints.prototype._all_descendants = function($jp) {
	throw "JoinPoints._all_descendants: not implemented";
}



/**
 * 
 * @return {$jp[]} the children of the given node
 */
JoinPoints.prototype.children = function($jp, jpType) {
	// TODO: This function can be optimized by using streaming

	if($jp === undefined) {
		return [];
	}
	
	Check.isJoinPoint($jp);

	var children = this._all_children($jp);
	if(jpType === undefined) {
		return children;
	}
	
	return this._filterNodes(children, jpType);
}

JoinPoints.prototype._filterNodes = function($jps, jpType) {

	var filteredJps = [];

	for(var $jp of $jps) {

		if(!$jp.instanceOf(jpType)) {
			continue;
		}
		
		filteredJps.push($jp);
	}
	
	return filteredJps;

}


JoinPoints.prototype.descendants = function($jp, jpType) {

	if($jp === undefined) {
		return [];
	}
	

	var descendants = this._all_descendants($jp);
	
	if(jpType === undefined) {
		return descendants;
	}	
	
	Check.isJoinPoint($jp);

	return this._filterNodes(descendants, jpType);
}


/**
 * Iterates of attributeNames, returns the first value that is not null or undefined.
 * If no value is found for the given attributes, returns undefined
 * 
 */
JoinPoints.getAttribute = function($jp, attributeNames) {
	for(attribute of attributeNames) {
		var value = $jp[attribute];
		if(!isUndefined(value)) {
			return value;
		}
	}
	
	return undefined;
}

/**
 * Helper method of getAttribute which throws an exception if no value is found
 */
JoinPoints.getAttributeStrict = function($jp, attributeNames) {
	var value = this.getAttribute($jp, attributeNames);
	
	if(value === undefined) {
		throw "Could not find any of the given attributes in " + $jp + ":" + attributeNames.join(", ");
	}

	return value;
}


/**
 * Converts the join point to a string of code. Expects attribute 'code' to exist.
 * 
 * @param {joinpoint} $jp - join point to convert to code.
 *
 * @return {String} a String with the code representation of this join point.
 */
JoinPoints.getCode = function($jp) {
	checkJoinPoint($jp);
	
	// Check if attribute code is defined
	if(!Weaver.hasAttribute($jp, "code")) {
		throw "JoinPoints.getCode(): expected attribute 'code' to exist";
	}
	
	return $jp["code"];
}
