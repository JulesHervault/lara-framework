import lara.Io;
import lara.util.DataStore;
import weaver.util.WeaverDataStore;

/**
 * Contains generic methods related to all weavers. 
 */
var WeaverOptions = {};
//var WeaverOptions = new DataStore(LaraI.getThreadLocalData());
//var WeaverOptions = new WeaverDataStore(LaraI.getThreadLocalData());

/**
 * @return DataStore with the data of the current weaver
 */
WeaverOptions.getData = function() {
	return new WeaverDataStore(LaraI.getThreadLocalData());
}

/**
 * @return the current WeaverEngine
 */
WeaverOptions.getWeaverEngine = function() {
	return Java.type("org.lara.interpreter.weaver.interf.WeaverEngine").getThreadLocalWeaver();
}

/**
 * @return java.util.Set<String> with the languages supported by the current weaver 
 */
WeaverOptions.getSupportedLanguages = function() {
	return this.getWeaverEngine().getLanguages(); 
}

/**
 * @return {Java StoreDefinition}
 */
WeaverOptions.getKeys = function() {
	return Java.type("org.lara.interpreter.joptions.config.interpreter.LaraiKeys").STORE_DEFINITION;
}

/**
 * @return a number between 0 and 3, representing the verbose level (0 - less information, 3 - more information)
 * @deprecated Use weaver.util.WeaverDataStore instead
 */
WeaverOptions.getVerboseLevel = function() {
	return WeaverOptions.getData().get("verbose").ordinal();	
}

/**
 * @param verboseLevel a number between 0 and 3, representing the verbose level (0 - less information, 3 - more information)
 * @deprecated Use weaver.util.WeaverDataStore instead
 */
WeaverOptions.setVerboseLevel = function(verboseLevel) {
	checkTrue(verboseLevel >= 0 && verboseLevel <= 3, "WeaverOptions.setVerboseLevel: expected a number  between 0 and 3");
	
	WeaverOptions.getData().put("verbose", VerboseLevel.values()[verboseLevel]);	
}

/**
 * @return a java.io.File representing the current output folder of the weaver
 * @deprecated Use weaver.util.WeaverDataStore instead
 */
WeaverOptions.getOutputFolder = function() {
	return WeaverOptions.getData().get("output");	
}

/**
 * @param outputFolder a java.io.File or a String, representing the current output folder of the weaver
 * @deprecated Use weaver.util.WeaverDataStore instead
 */
WeaverOptions.setOutputFolder = function(outputFolder) {
	//var normalizedOutputFolder = Io.getPath(outputFolder);
	var normalizedOutputFolder = Io.mkdir(outputFolder);
	
	WeaverOptions.getData().put("output", normalizedOutputFolder);	
}




